
Timer0Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000029fc  00002a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800068  00800068  00002a98  2**0
                  ALLOC
  3 .stab         00001c68  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a17  00000000  00000000  00004700  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005117  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005257  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000053c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_9>
      28:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 37       	cpi	r26, 0x7E	; 126
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ef       	ldi	r30, 0xFC	; 252
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 95 06 	call	0xd2a	; 0xd2a <main>
      8a:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_6>:

volatile u32 counter=0,c1,c2,c3,flag=0;

void __vector_6 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_6 (void)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	if (flag==0)
     b6c:	80 91 6c 00 	lds	r24, 0x006C
     b70:	90 91 6d 00 	lds	r25, 0x006D
     b74:	a0 91 6e 00 	lds	r26, 0x006E
     b78:	b0 91 6f 00 	lds	r27, 0x006F
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	a1 05       	cpc	r26, r1
     b80:	b1 05       	cpc	r27, r1
     b82:	f9 f4       	brne	.+62     	; 0xbc2 <__vector_6+0x7c>
	{
		c1=ICR1;
     b84:	e6 e4       	ldi	r30, 0x46	; 70
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	cc 01       	movw	r24, r24
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	80 93 76 00 	sts	0x0076, r24
     b96:	90 93 77 00 	sts	0x0077, r25
     b9a:	a0 93 78 00 	sts	0x0078, r26
     b9e:	b0 93 79 00 	sts	0x0079, r27
		counter=0;
     ba2:	10 92 68 00 	sts	0x0068, r1
     ba6:	10 92 69 00 	sts	0x0069, r1
     baa:	10 92 6a 00 	sts	0x006A, r1
     bae:	10 92 6b 00 	sts	0x006B, r1
		CLR_BIT(TCCR1B,6);
     bb2:	ae e4       	ldi	r26, 0x4E	; 78
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ee e4       	ldi	r30, 0x4E	; 78
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8f 7b       	andi	r24, 0xBF	; 191
     bbe:	8c 93       	st	X, r24
     bc0:	65 c0       	rjmp	.+202    	; 0xc8c <__vector_6+0x146>
	}
	else if(flag==1)
     bc2:	80 91 6c 00 	lds	r24, 0x006C
     bc6:	90 91 6d 00 	lds	r25, 0x006D
     bca:	a0 91 6e 00 	lds	r26, 0x006E
     bce:	b0 91 6f 00 	lds	r27, 0x006F
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	31 f5       	brne	.+76     	; 0xc28 <__vector_6+0xe2>
	{
		c2=ICR1+(counter*65536);
     bdc:	e6 e4       	ldi	r30, 0x46	; 70
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	9c 01       	movw	r18, r24
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	80 91 68 00 	lds	r24, 0x0068
     bee:	90 91 69 00 	lds	r25, 0x0069
     bf2:	a0 91 6a 00 	lds	r26, 0x006A
     bf6:	b0 91 6b 00 	lds	r27, 0x006B
     bfa:	dc 01       	movw	r26, r24
     bfc:	99 27       	eor	r25, r25
     bfe:	88 27       	eor	r24, r24
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	a4 1f       	adc	r26, r20
     c06:	b5 1f       	adc	r27, r21
     c08:	80 93 72 00 	sts	0x0072, r24
     c0c:	90 93 73 00 	sts	0x0073, r25
     c10:	a0 93 74 00 	sts	0x0074, r26
     c14:	b0 93 75 00 	sts	0x0075, r27
		SET_BIT(TCCR1B,6);
     c18:	ae e4       	ldi	r26, 0x4E	; 78
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ee e4       	ldi	r30, 0x4E	; 78
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	80 64       	ori	r24, 0x40	; 64
     c24:	8c 93       	st	X, r24
     c26:	32 c0       	rjmp	.+100    	; 0xc8c <__vector_6+0x146>
	}

	else if(flag==2)
     c28:	80 91 6c 00 	lds	r24, 0x006C
     c2c:	90 91 6d 00 	lds	r25, 0x006D
     c30:	a0 91 6e 00 	lds	r26, 0x006E
     c34:	b0 91 6f 00 	lds	r27, 0x006F
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	29 f5       	brne	.+74     	; 0xc8c <__vector_6+0x146>
	{
		c3=ICR1+(counter*65536);
     c42:	e6 e4       	ldi	r30, 0x46	; 70
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	9c 01       	movw	r18, r24
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	80 91 68 00 	lds	r24, 0x0068
     c54:	90 91 69 00 	lds	r25, 0x0069
     c58:	a0 91 6a 00 	lds	r26, 0x006A
     c5c:	b0 91 6b 00 	lds	r27, 0x006B
     c60:	dc 01       	movw	r26, r24
     c62:	99 27       	eor	r25, r25
     c64:	88 27       	eor	r24, r24
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	a4 1f       	adc	r26, r20
     c6c:	b5 1f       	adc	r27, r21
     c6e:	80 93 7a 00 	sts	0x007A, r24
     c72:	90 93 7b 00 	sts	0x007B, r25
     c76:	a0 93 7c 00 	sts	0x007C, r26
     c7a:	b0 93 7d 00 	sts	0x007D, r27
		CLR_BIT(TIMSK,5);//=0b11011111;// close the ICE interrupt
     c7e:	a9 e5       	ldi	r26, 0x59	; 89
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e9 e5       	ldi	r30, 0x59	; 89
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	8f 7d       	andi	r24, 0xDF	; 223
     c8a:	8c 93       	st	X, r24

	}
	flag++;
     c8c:	80 91 6c 00 	lds	r24, 0x006C
     c90:	90 91 6d 00 	lds	r25, 0x006D
     c94:	a0 91 6e 00 	lds	r26, 0x006E
     c98:	b0 91 6f 00 	lds	r27, 0x006F
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	a1 1d       	adc	r26, r1
     ca0:	b1 1d       	adc	r27, r1
     ca2:	80 93 6c 00 	sts	0x006C, r24
     ca6:	90 93 6d 00 	sts	0x006D, r25
     caa:	a0 93 6e 00 	sts	0x006E, r26
     cae:	b0 93 6f 00 	sts	0x006F, r27
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	0f 90       	pop	r0
     cd0:	1f 90       	pop	r1
     cd2:	18 95       	reti

00000cd4 <__vector_9>:



void __vector_9 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_9 (void)
{
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	counter++;
     cee:	80 91 68 00 	lds	r24, 0x0068
     cf2:	90 91 69 00 	lds	r25, 0x0069
     cf6:	a0 91 6a 00 	lds	r26, 0x006A
     cfa:	b0 91 6b 00 	lds	r27, 0x006B
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	a1 1d       	adc	r26, r1
     d02:	b1 1d       	adc	r27, r1
     d04:	80 93 68 00 	sts	0x0068, r24
     d08:	90 93 69 00 	sts	0x0069, r25
     d0c:	a0 93 6a 00 	sts	0x006A, r26
     d10:	b0 93 6b 00 	sts	0x006B, r27
}
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	bf 91       	pop	r27
     d1a:	af 91       	pop	r26
     d1c:	9f 91       	pop	r25
     d1e:	8f 91       	pop	r24
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <main>:


int main (void)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
	PortInitialization();
     d32:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <PortInitialization>
//	CLCD_voidInitalization();
//	CLCD_voidSetCursor(0,0);
//	CLCD_voidWriteString("Duty: ");
	Timer0_voidInit();
     d36:	0e 94 41 14 	call	0x2882	; 0x2882 <Timer0_voidInit>
	timer1_pwm_init();
     d3a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <timer1_pwm_init>
     d3e:	ff cf       	rjmp	.-2      	; 0xd3e <main+0x14>

00000d40 <CLCD_voidInitalization>:

/*Description:This API for CLCD Intialization */


void CLCD_voidInitalization(void)
{
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	ce 57       	subi	r28, 0x7E	; 126
     d4e:	d0 40       	sbci	r29, 0x00	; 0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	fe 01       	movw	r30, r28
     d5c:	e5 58       	subi	r30, 0x85	; 133
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e2       	ldi	r26, 0x20	; 32
     d66:	b2 e4       	ldi	r27, 0x42	; 66
     d68:	80 83       	st	Z, r24
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	a2 83       	std	Z+2, r26	; 0x02
     d6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d70:	8e 01       	movw	r16, r28
     d72:	09 58       	subi	r16, 0x89	; 137
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	fe 01       	movw	r30, r28
     d78:	e5 58       	subi	r30, 0x85	; 133
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	4a ef       	ldi	r20, 0xFA	; 250
     d8a:	54 e4       	ldi	r21, 0x44	; 68
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	f8 01       	movw	r30, r16
     d96:	80 83       	st	Z, r24
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	a2 83       	std	Z+2, r26	; 0x02
     d9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d9e:	fe 01       	movw	r30, r28
     da0:	e9 58       	subi	r30, 0x89	; 137
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	93 81       	ldd	r25, Z+3	; 0x03
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e8       	ldi	r20, 0x80	; 128
     db2:	5f e3       	ldi	r21, 0x3F	; 63
     db4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db8:	88 23       	and	r24, r24
     dba:	44 f4       	brge	.+16     	; 0xdcc <CLCD_voidInitalization+0x8c>
		__ticks = 1;
     dbc:	fe 01       	movw	r30, r28
     dbe:	eb 58       	subi	r30, 0x8B	; 139
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
     dca:	64 c0       	rjmp	.+200    	; 0xe94 <CLCD_voidInitalization+0x154>
	else if (__tmp > 65535)
     dcc:	fe 01       	movw	r30, r28
     dce:	e9 58       	subi	r30, 0x89	; 137
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	3f ef       	ldi	r19, 0xFF	; 255
     dde:	4f e7       	ldi	r20, 0x7F	; 127
     de0:	57 e4       	ldi	r21, 0x47	; 71
     de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de6:	18 16       	cp	r1, r24
     de8:	0c f0       	brlt	.+2      	; 0xdec <CLCD_voidInitalization+0xac>
     dea:	43 c0       	rjmp	.+134    	; 0xe72 <CLCD_voidInitalization+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dec:	fe 01       	movw	r30, r28
     dee:	e5 58       	subi	r30, 0x85	; 133
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e2       	ldi	r20, 0x20	; 32
     e00:	51 e4       	ldi	r21, 0x41	; 65
     e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	8e 01       	movw	r16, r28
     e0c:	0b 58       	subi	r16, 0x8B	; 139
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	f8 01       	movw	r30, r16
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	1f c0       	rjmp	.+62     	; 0xe62 <CLCD_voidInitalization+0x122>
     e24:	fe 01       	movw	r30, r28
     e26:	ed 58       	subi	r30, 0x8D	; 141
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	88 ec       	ldi	r24, 0xC8	; 200
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e32:	fe 01       	movw	r30, r28
     e34:	ed 58       	subi	r30, 0x8D	; 141
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <CLCD_voidInitalization+0xfc>
     e40:	fe 01       	movw	r30, r28
     e42:	ed 58       	subi	r30, 0x8D	; 141
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4a:	de 01       	movw	r26, r28
     e4c:	ab 58       	subi	r26, 0x8B	; 139
     e4e:	bf 4f       	sbci	r27, 0xFF	; 255
     e50:	fe 01       	movw	r30, r28
     e52:	eb 58       	subi	r30, 0x8B	; 139
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	11 96       	adiw	r26, 0x01	; 1
     e5e:	9c 93       	st	X, r25
     e60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	fe 01       	movw	r30, r28
     e64:	eb 58       	subi	r30, 0x8B	; 139
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	d1 f6       	brne	.-76     	; 0xe24 <CLCD_voidInitalization+0xe4>
     e70:	27 c0       	rjmp	.+78     	; 0xec0 <CLCD_voidInitalization+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	8e 01       	movw	r16, r28
     e74:	0b 58       	subi	r16, 0x8B	; 139
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	fe 01       	movw	r30, r28
     e7a:	e9 58       	subi	r30, 0x89	; 137
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	60 81       	ld	r22, Z
     e80:	71 81       	ldd	r23, Z+1	; 0x01
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	f8 01       	movw	r30, r16
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
     e94:	de 01       	movw	r26, r28
     e96:	af 58       	subi	r26, 0x8F	; 143
     e98:	bf 4f       	sbci	r27, 0xFF	; 255
     e9a:	fe 01       	movw	r30, r28
     e9c:	eb 58       	subi	r30, 0x8B	; 139
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	8d 93       	st	X+, r24
     ea6:	9c 93       	st	X, r25
     ea8:	fe 01       	movw	r30, r28
     eaa:	ef 58       	subi	r30, 0x8F	; 143
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <CLCD_voidInitalization+0x172>
     eb6:	fe 01       	movw	r30, r28
     eb8:	ef 58       	subi	r30, 0x8F	; 143
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24

	CLCD_WriteCommand(0b00111000);

#elif CLCD_u8_DATA_LENGTH == FOUR_BIT_MODE
	/*Set RS =0*/
	SetPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN,0);
     ec0:	83 e4       	ldi	r24, 0x43	; 67
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	/* Set RW =0  */
	SetPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN,0);
     eca:	83 e4       	ldi	r24, 0x43	; 67
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	/*
	 * Send 0010
	 * */
	CLCD_voidSetHalfDataPort(0b0010);
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <CLCD_voidSetHalfDataPort>
	/*
	 * Send Enable Pulse
	 * */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
     eda:	83 e4       	ldi	r24, 0x43	; 67
     edc:	62 e0       	ldi	r22, 0x02	; 2
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
     ee4:	fe 01       	movw	r30, r28
     ee6:	e3 59       	subi	r30, 0x93	; 147
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 e8       	ldi	r26, 0x80	; 128
     ef0:	bf e3       	ldi	r27, 0x3F	; 63
     ef2:	80 83       	st	Z, r24
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	a2 83       	std	Z+2, r26	; 0x02
     ef8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efa:	8e 01       	movw	r16, r28
     efc:	07 59       	subi	r16, 0x97	; 151
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	fe 01       	movw	r30, r28
     f02:	e3 59       	subi	r30, 0x93	; 147
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a ef       	ldi	r20, 0xFA	; 250
     f14:	54 e4       	ldi	r21, 0x44	; 68
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	f8 01       	movw	r30, r16
     f20:	80 83       	st	Z, r24
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	a2 83       	std	Z+2, r26	; 0x02
     f26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f28:	fe 01       	movw	r30, r28
     f2a:	e7 59       	subi	r30, 0x97	; 151
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e8       	ldi	r20, 0x80	; 128
     f3c:	5f e3       	ldi	r21, 0x3F	; 63
     f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f42:	88 23       	and	r24, r24
     f44:	44 f4       	brge	.+16     	; 0xf56 <CLCD_voidInitalization+0x216>
		__ticks = 1;
     f46:	fe 01       	movw	r30, r28
     f48:	e9 59       	subi	r30, 0x99	; 153
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
     f54:	64 c0       	rjmp	.+200    	; 0x101e <CLCD_voidInitalization+0x2de>
	else if (__tmp > 65535)
     f56:	fe 01       	movw	r30, r28
     f58:	e7 59       	subi	r30, 0x97	; 151
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f70:	18 16       	cp	r1, r24
     f72:	0c f0       	brlt	.+2      	; 0xf76 <CLCD_voidInitalization+0x236>
     f74:	43 c0       	rjmp	.+134    	; 0xffc <CLCD_voidInitalization+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f76:	fe 01       	movw	r30, r28
     f78:	e3 59       	subi	r30, 0x93	; 147
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e2       	ldi	r20, 0x20	; 32
     f8a:	51 e4       	ldi	r21, 0x41	; 65
     f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8e 01       	movw	r16, r28
     f96:	09 59       	subi	r16, 0x99	; 153
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	f8 01       	movw	r30, r16
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	1f c0       	rjmp	.+62     	; 0xfec <CLCD_voidInitalization+0x2ac>
     fae:	fe 01       	movw	r30, r28
     fb0:	eb 59       	subi	r30, 0x9B	; 155
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	88 ec       	ldi	r24, 0xC8	; 200
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
     fbc:	fe 01       	movw	r30, r28
     fbe:	eb 59       	subi	r30, 0x9B	; 155
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <CLCD_voidInitalization+0x286>
     fca:	fe 01       	movw	r30, r28
     fcc:	eb 59       	subi	r30, 0x9B	; 155
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd4:	de 01       	movw	r26, r28
     fd6:	a9 59       	subi	r26, 0x99	; 153
     fd8:	bf 4f       	sbci	r27, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	e9 59       	subi	r30, 0x99	; 153
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	9c 93       	st	X, r25
     fea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fec:	fe 01       	movw	r30, r28
     fee:	e9 59       	subi	r30, 0x99	; 153
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	d1 f6       	brne	.-76     	; 0xfae <CLCD_voidInitalization+0x26e>
     ffa:	27 c0       	rjmp	.+78     	; 0x104a <CLCD_voidInitalization+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffc:	8e 01       	movw	r16, r28
     ffe:	09 59       	subi	r16, 0x99	; 153
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	fe 01       	movw	r30, r28
    1004:	e7 59       	subi	r30, 0x97	; 151
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	f8 01       	movw	r30, r16
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
    101e:	de 01       	movw	r26, r28
    1020:	ad 59       	subi	r26, 0x9D	; 157
    1022:	bf 4f       	sbci	r27, 0xFF	; 255
    1024:	fe 01       	movw	r30, r28
    1026:	e9 59       	subi	r30, 0x99	; 153
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	8d 93       	st	X+, r24
    1030:	9c 93       	st	X, r25
    1032:	fe 01       	movw	r30, r28
    1034:	ed 59       	subi	r30, 0x9D	; 157
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <CLCD_voidInitalization+0x2fc>
    1040:	fe 01       	movw	r30, r28
    1042:	ed 59       	subi	r30, 0x9D	; 157
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    104a:	83 e4       	ldi	r24, 0x43	; 67
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1054:	fe 01       	movw	r30, r28
    1056:	e1 5a       	subi	r30, 0xA1	; 161
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a0 e8       	ldi	r26, 0x80	; 128
    1060:	bf e3       	ldi	r27, 0x3F	; 63
    1062:	80 83       	st	Z, r24
    1064:	91 83       	std	Z+1, r25	; 0x01
    1066:	a2 83       	std	Z+2, r26	; 0x02
    1068:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106a:	8e 01       	movw	r16, r28
    106c:	05 5a       	subi	r16, 0xA5	; 165
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	fe 01       	movw	r30, r28
    1072:	e1 5a       	subi	r30, 0xA1	; 161
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	4a ef       	ldi	r20, 0xFA	; 250
    1084:	54 e4       	ldi	r21, 0x44	; 68
    1086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	f8 01       	movw	r30, r16
    1090:	80 83       	st	Z, r24
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	a2 83       	std	Z+2, r26	; 0x02
    1096:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1098:	fe 01       	movw	r30, r28
    109a:	e5 5a       	subi	r30, 0xA5	; 165
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	93 81       	ldd	r25, Z+3	; 0x03
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	44 f4       	brge	.+16     	; 0x10c6 <CLCD_voidInitalization+0x386>
		__ticks = 1;
    10b6:	fe 01       	movw	r30, r28
    10b8:	e7 5a       	subi	r30, 0xA7	; 167
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
    10c4:	64 c0       	rjmp	.+200    	; 0x118e <CLCD_voidInitalization+0x44e>
	else if (__tmp > 65535)
    10c6:	fe 01       	movw	r30, r28
    10c8:	e5 5a       	subi	r30, 0xA5	; 165
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	0c f0       	brlt	.+2      	; 0x10e6 <CLCD_voidInitalization+0x3a6>
    10e4:	43 c0       	rjmp	.+134    	; 0x116c <CLCD_voidInitalization+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e6:	fe 01       	movw	r30, r28
    10e8:	e1 5a       	subi	r30, 0xA1	; 161
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e2       	ldi	r20, 0x20	; 32
    10fa:	51 e4       	ldi	r21, 0x41	; 65
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	8e 01       	movw	r16, r28
    1106:	07 5a       	subi	r16, 0xA7	; 167
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	f8 01       	movw	r30, r16
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	1f c0       	rjmp	.+62     	; 0x115c <CLCD_voidInitalization+0x41c>
    111e:	fe 01       	movw	r30, r28
    1120:	e9 5a       	subi	r30, 0xA9	; 169
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	88 ec       	ldi	r24, 0xC8	; 200
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
    112c:	fe 01       	movw	r30, r28
    112e:	e9 5a       	subi	r30, 0xA9	; 169
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <CLCD_voidInitalization+0x3f6>
    113a:	fe 01       	movw	r30, r28
    113c:	e9 5a       	subi	r30, 0xA9	; 169
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1144:	de 01       	movw	r26, r28
    1146:	a7 5a       	subi	r26, 0xA7	; 167
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	fe 01       	movw	r30, r28
    114c:	e7 5a       	subi	r30, 0xA7	; 167
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	11 96       	adiw	r26, 0x01	; 1
    1158:	9c 93       	st	X, r25
    115a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	fe 01       	movw	r30, r28
    115e:	e7 5a       	subi	r30, 0xA7	; 167
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	d1 f6       	brne	.-76     	; 0x111e <CLCD_voidInitalization+0x3de>
    116a:	27 c0       	rjmp	.+78     	; 0x11ba <CLCD_voidInitalization+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116c:	8e 01       	movw	r16, r28
    116e:	07 5a       	subi	r16, 0xA7	; 167
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	fe 01       	movw	r30, r28
    1174:	e5 5a       	subi	r30, 0xA5	; 165
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	f8 01       	movw	r30, r16
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
    118e:	de 01       	movw	r26, r28
    1190:	ab 5a       	subi	r26, 0xAB	; 171
    1192:	bf 4f       	sbci	r27, 0xFF	; 255
    1194:	fe 01       	movw	r30, r28
    1196:	e7 5a       	subi	r30, 0xA7	; 167
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	8d 93       	st	X+, r24
    11a0:	9c 93       	st	X, r25
    11a2:	fe 01       	movw	r30, r28
    11a4:	eb 5a       	subi	r30, 0xAB	; 171
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <CLCD_voidInitalization+0x46c>
    11b0:	fe 01       	movw	r30, r28
    11b2:	eb 5a       	subi	r30, 0xAB	; 171
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
	_delay_ms(1);
	/*
	 * Send 0010
	 * */
	CLCD_voidSetHalfDataPort(0b0010);
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <CLCD_voidSetHalfDataPort>
	/*
	 * Send Enable Pulse
	 * */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    11c0:	83 e4       	ldi	r24, 0x43	; 67
    11c2:	62 e0       	ldi	r22, 0x02	; 2
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    11ca:	fe 01       	movw	r30, r28
    11cc:	ef 5a       	subi	r30, 0xAF	; 175
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a0 e8       	ldi	r26, 0x80	; 128
    11d6:	bf e3       	ldi	r27, 0x3F	; 63
    11d8:	80 83       	st	Z, r24
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	a2 83       	std	Z+2, r26	; 0x02
    11de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e0:	8e 01       	movw	r16, r28
    11e2:	03 5b       	subi	r16, 0xB3	; 179
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	fe 01       	movw	r30, r28
    11e8:	ef 5a       	subi	r30, 0xAF	; 175
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	4a ef       	ldi	r20, 0xFA	; 250
    11fa:	54 e4       	ldi	r21, 0x44	; 68
    11fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	f8 01       	movw	r30, r16
    1206:	80 83       	st	Z, r24
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	a2 83       	std	Z+2, r26	; 0x02
    120c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    120e:	fe 01       	movw	r30, r28
    1210:	e3 5b       	subi	r30, 0xB3	; 179
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	60 81       	ld	r22, Z
    1216:	71 81       	ldd	r23, Z+1	; 0x01
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	93 81       	ldd	r25, Z+3	; 0x03
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	44 f4       	brge	.+16     	; 0x123c <CLCD_voidInitalization+0x4fc>
		__ticks = 1;
    122c:	fe 01       	movw	r30, r28
    122e:	e5 5b       	subi	r30, 0xB5	; 181
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	80 83       	st	Z, r24
    123a:	64 c0       	rjmp	.+200    	; 0x1304 <CLCD_voidInitalization+0x5c4>
	else if (__tmp > 65535)
    123c:	fe 01       	movw	r30, r28
    123e:	e3 5b       	subi	r30, 0xB3	; 179
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	60 81       	ld	r22, Z
    1244:	71 81       	ldd	r23, Z+1	; 0x01
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	3f ef       	ldi	r19, 0xFF	; 255
    124e:	4f e7       	ldi	r20, 0x7F	; 127
    1250:	57 e4       	ldi	r21, 0x47	; 71
    1252:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <CLCD_voidInitalization+0x51c>
    125a:	43 c0       	rjmp	.+134    	; 0x12e2 <CLCD_voidInitalization+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125c:	fe 01       	movw	r30, r28
    125e:	ef 5a       	subi	r30, 0xAF	; 175
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	60 81       	ld	r22, Z
    1264:	71 81       	ldd	r23, Z+1	; 0x01
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	93 81       	ldd	r25, Z+3	; 0x03
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e2       	ldi	r20, 0x20	; 32
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8e 01       	movw	r16, r28
    127c:	05 5b       	subi	r16, 0xB5	; 181
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	f8 01       	movw	r30, r16
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
    1292:	1f c0       	rjmp	.+62     	; 0x12d2 <CLCD_voidInitalization+0x592>
    1294:	fe 01       	movw	r30, r28
    1296:	e7 5b       	subi	r30, 0xB7	; 183
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	88 ec       	ldi	r24, 0xC8	; 200
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
    12a2:	fe 01       	movw	r30, r28
    12a4:	e7 5b       	subi	r30, 0xB7	; 183
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <CLCD_voidInitalization+0x56c>
    12b0:	fe 01       	movw	r30, r28
    12b2:	e7 5b       	subi	r30, 0xB7	; 183
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ba:	de 01       	movw	r26, r28
    12bc:	a5 5b       	subi	r26, 0xB5	; 181
    12be:	bf 4f       	sbci	r27, 0xFF	; 255
    12c0:	fe 01       	movw	r30, r28
    12c2:	e5 5b       	subi	r30, 0xB5	; 181
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	9c 93       	st	X, r25
    12d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	fe 01       	movw	r30, r28
    12d4:	e5 5b       	subi	r30, 0xB5	; 181
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	d1 f6       	brne	.-76     	; 0x1294 <CLCD_voidInitalization+0x554>
    12e0:	27 c0       	rjmp	.+78     	; 0x1330 <CLCD_voidInitalization+0x5f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e2:	8e 01       	movw	r16, r28
    12e4:	05 5b       	subi	r16, 0xB5	; 181
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	fe 01       	movw	r30, r28
    12ea:	e3 5b       	subi	r30, 0xB3	; 179
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	60 81       	ld	r22, Z
    12f0:	71 81       	ldd	r23, Z+1	; 0x01
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	f8 01       	movw	r30, r16
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
    1304:	de 01       	movw	r26, r28
    1306:	a9 5b       	subi	r26, 0xB9	; 185
    1308:	bf 4f       	sbci	r27, 0xFF	; 255
    130a:	fe 01       	movw	r30, r28
    130c:	e5 5b       	subi	r30, 0xB5	; 181
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	80 81       	ld	r24, Z
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	8d 93       	st	X+, r24
    1316:	9c 93       	st	X, r25
    1318:	fe 01       	movw	r30, r28
    131a:	e9 5b       	subi	r30, 0xB9	; 185
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <CLCD_voidInitalization+0x5e2>
    1326:	fe 01       	movw	r30, r28
    1328:	e9 5b       	subi	r30, 0xB9	; 185
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1330:	83 e4       	ldi	r24, 0x43	; 67
    1332:	62 e0       	ldi	r22, 0x02	; 2
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    133a:	fe 01       	movw	r30, r28
    133c:	ed 5b       	subi	r30, 0xBD	; 189
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a0 e8       	ldi	r26, 0x80	; 128
    1346:	bf e3       	ldi	r27, 0x3F	; 63
    1348:	80 83       	st	Z, r24
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	a2 83       	std	Z+2, r26	; 0x02
    134e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1350:	8e 01       	movw	r16, r28
    1352:	01 5c       	subi	r16, 0xC1	; 193
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	fe 01       	movw	r30, r28
    1358:	ed 5b       	subi	r30, 0xBD	; 189
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a ef       	ldi	r20, 0xFA	; 250
    136a:	54 e4       	ldi	r21, 0x44	; 68
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	f8 01       	movw	r30, r16
    1376:	80 83       	st	Z, r24
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	a2 83       	std	Z+2, r26	; 0x02
    137c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    137e:	fe 01       	movw	r30, r28
    1380:	ff 96       	adiw	r30, 0x3f	; 63
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <CLCD_voidInitalization+0x664>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9e af       	std	Y+62, r25	; 0x3e
    13a0:	8d af       	std	Y+61, r24	; 0x3d
    13a2:	46 c0       	rjmp	.+140    	; 0x1430 <CLCD_voidInitalization+0x6f0>
	else if (__tmp > 65535)
    13a4:	fe 01       	movw	r30, r28
    13a6:	ff 96       	adiw	r30, 0x3f	; 63
    13a8:	60 81       	ld	r22, Z
    13aa:	71 81       	ldd	r23, Z+1	; 0x01
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	4f e7       	ldi	r20, 0x7F	; 127
    13b6:	57 e4       	ldi	r21, 0x47	; 71
    13b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	64 f5       	brge	.+88     	; 0x1418 <CLCD_voidInitalization+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c0:	fe 01       	movw	r30, r28
    13c2:	ed 5b       	subi	r30, 0xBD	; 189
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e af       	std	Y+62, r25	; 0x3e
    13ec:	8d af       	std	Y+61, r24	; 0x3d
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <CLCD_voidInitalization+0x6ce>
    13f0:	88 ec       	ldi	r24, 0xC8	; 200
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c af       	std	Y+60, r25	; 0x3c
    13f6:	8b af       	std	Y+59, r24	; 0x3b
    13f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    13fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <CLCD_voidInitalization+0x6bc>
    1400:	9c af       	std	Y+60, r25	; 0x3c
    1402:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8d ad       	ldd	r24, Y+61	; 0x3d
    1406:	9e ad       	ldd	r25, Y+62	; 0x3e
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9e af       	std	Y+62, r25	; 0x3e
    140c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1410:	9e ad       	ldd	r25, Y+62	; 0x3e
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <CLCD_voidInitalization+0x6b0>
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <CLCD_voidInitalization+0x704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	fe 01       	movw	r30, r28
    141a:	ff 96       	adiw	r30, 0x3f	; 63
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9e af       	std	Y+62, r25	; 0x3e
    142e:	8d af       	std	Y+61, r24	; 0x3d
    1430:	8d ad       	ldd	r24, Y+61	; 0x3d
    1432:	9e ad       	ldd	r25, Y+62	; 0x3e
    1434:	9a af       	std	Y+58, r25	; 0x3a
    1436:	89 af       	std	Y+57, r24	; 0x39
    1438:	89 ad       	ldd	r24, Y+57	; 0x39
    143a:	9a ad       	ldd	r25, Y+58	; 0x3a
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <CLCD_voidInitalization+0x6fc>
    1440:	9a af       	std	Y+58, r25	; 0x3a
    1442:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	/*
	 * Send 1000
	 * */
	CLCD_voidSetHalfDataPort(0b1000);
    1444:	88 e0       	ldi	r24, 0x08	; 8
    1446:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <CLCD_voidSetHalfDataPort>
	/*
	 * Send Enable Pulse
	 * */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    144a:	83 e4       	ldi	r24, 0x43	; 67
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a0 e8       	ldi	r26, 0x80	; 128
    145a:	bf e3       	ldi	r27, 0x3F	; 63
    145c:	8d ab       	std	Y+53, r24	; 0x35
    145e:	9e ab       	std	Y+54, r25	; 0x36
    1460:	af ab       	std	Y+55, r26	; 0x37
    1462:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1464:	6d a9       	ldd	r22, Y+53	; 0x35
    1466:	7e a9       	ldd	r23, Y+54	; 0x36
    1468:	8f a9       	ldd	r24, Y+55	; 0x37
    146a:	98 ad       	ldd	r25, Y+56	; 0x38
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4a ef       	ldi	r20, 0xFA	; 250
    1472:	54 e4       	ldi	r21, 0x44	; 68
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	89 ab       	std	Y+49, r24	; 0x31
    147e:	9a ab       	std	Y+50, r25	; 0x32
    1480:	ab ab       	std	Y+51, r26	; 0x33
    1482:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1484:	69 a9       	ldd	r22, Y+49	; 0x31
    1486:	7a a9       	ldd	r23, Y+50	; 0x32
    1488:	8b a9       	ldd	r24, Y+51	; 0x33
    148a:	9c a9       	ldd	r25, Y+52	; 0x34
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e8       	ldi	r20, 0x80	; 128
    1492:	5f e3       	ldi	r21, 0x3F	; 63
    1494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1498:	88 23       	and	r24, r24
    149a:	2c f4       	brge	.+10     	; 0x14a6 <CLCD_voidInitalization+0x766>
		__ticks = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	98 ab       	std	Y+48, r25	; 0x30
    14a2:	8f a7       	std	Y+47, r24	; 0x2f
    14a4:	3f c0       	rjmp	.+126    	; 0x1524 <CLCD_voidInitalization+0x7e4>
	else if (__tmp > 65535)
    14a6:	69 a9       	ldd	r22, Y+49	; 0x31
    14a8:	7a a9       	ldd	r23, Y+50	; 0x32
    14aa:	8b a9       	ldd	r24, Y+51	; 0x33
    14ac:	9c a9       	ldd	r25, Y+52	; 0x34
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	3f ef       	ldi	r19, 0xFF	; 255
    14b2:	4f e7       	ldi	r20, 0x7F	; 127
    14b4:	57 e4       	ldi	r21, 0x47	; 71
    14b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	4c f5       	brge	.+82     	; 0x1510 <CLCD_voidInitalization+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14be:	6d a9       	ldd	r22, Y+53	; 0x35
    14c0:	7e a9       	ldd	r23, Y+54	; 0x36
    14c2:	8f a9       	ldd	r24, Y+55	; 0x37
    14c4:	98 ad       	ldd	r25, Y+56	; 0x38
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e2       	ldi	r20, 0x20	; 32
    14cc:	51 e4       	ldi	r21, 0x41	; 65
    14ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	98 ab       	std	Y+48, r25	; 0x30
    14e4:	8f a7       	std	Y+47, r24	; 0x2f
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <CLCD_voidInitalization+0x7c6>
    14e8:	88 ec       	ldi	r24, 0xC8	; 200
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9e a7       	std	Y+46, r25	; 0x2e
    14ee:	8d a7       	std	Y+45, r24	; 0x2d
    14f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    14f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <CLCD_voidInitalization+0x7b4>
    14f8:	9e a7       	std	Y+46, r25	; 0x2e
    14fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	98 ab       	std	Y+48, r25	; 0x30
    1504:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1506:	8f a5       	ldd	r24, Y+47	; 0x2f
    1508:	98 a9       	ldd	r25, Y+48	; 0x30
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	69 f7       	brne	.-38     	; 0x14e8 <CLCD_voidInitalization+0x7a8>
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <CLCD_voidInitalization+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1510:	69 a9       	ldd	r22, Y+49	; 0x31
    1512:	7a a9       	ldd	r23, Y+50	; 0x32
    1514:	8b a9       	ldd	r24, Y+51	; 0x33
    1516:	9c a9       	ldd	r25, Y+52	; 0x34
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	98 ab       	std	Y+48, r25	; 0x30
    1522:	8f a7       	std	Y+47, r24	; 0x2f
    1524:	8f a5       	ldd	r24, Y+47	; 0x2f
    1526:	98 a9       	ldd	r25, Y+48	; 0x30
    1528:	9c a7       	std	Y+44, r25	; 0x2c
    152a:	8b a7       	std	Y+43, r24	; 0x2b
    152c:	8b a5       	ldd	r24, Y+43	; 0x2b
    152e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <CLCD_voidInitalization+0x7f0>
    1534:	9c a7       	std	Y+44, r25	; 0x2c
    1536:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1538:	83 e4       	ldi	r24, 0x43	; 67
    153a:	62 e0       	ldi	r22, 0x02	; 2
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e8       	ldi	r26, 0x80	; 128
    1548:	bf e3       	ldi	r27, 0x3F	; 63
    154a:	8f a3       	std	Y+39, r24	; 0x27
    154c:	98 a7       	std	Y+40, r25	; 0x28
    154e:	a9 a7       	std	Y+41, r26	; 0x29
    1550:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1552:	6f a1       	ldd	r22, Y+39	; 0x27
    1554:	78 a5       	ldd	r23, Y+40	; 0x28
    1556:	89 a5       	ldd	r24, Y+41	; 0x29
    1558:	9a a5       	ldd	r25, Y+42	; 0x2a
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	4a ef       	ldi	r20, 0xFA	; 250
    1560:	54 e4       	ldi	r21, 0x44	; 68
    1562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	8b a3       	std	Y+35, r24	; 0x23
    156c:	9c a3       	std	Y+36, r25	; 0x24
    156e:	ad a3       	std	Y+37, r26	; 0x25
    1570:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1572:	6b a1       	ldd	r22, Y+35	; 0x23
    1574:	7c a1       	ldd	r23, Y+36	; 0x24
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e8       	ldi	r20, 0x80	; 128
    1580:	5f e3       	ldi	r21, 0x3F	; 63
    1582:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1586:	88 23       	and	r24, r24
    1588:	2c f4       	brge	.+10     	; 0x1594 <CLCD_voidInitalization+0x854>
		__ticks = 1;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9a a3       	std	Y+34, r25	; 0x22
    1590:	89 a3       	std	Y+33, r24	; 0x21
    1592:	3f c0       	rjmp	.+126    	; 0x1612 <CLCD_voidInitalization+0x8d2>
	else if (__tmp > 65535)
    1594:	6b a1       	ldd	r22, Y+35	; 0x23
    1596:	7c a1       	ldd	r23, Y+36	; 0x24
    1598:	8d a1       	ldd	r24, Y+37	; 0x25
    159a:	9e a1       	ldd	r25, Y+38	; 0x26
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	3f ef       	ldi	r19, 0xFF	; 255
    15a0:	4f e7       	ldi	r20, 0x7F	; 127
    15a2:	57 e4       	ldi	r21, 0x47	; 71
    15a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	4c f5       	brge	.+82     	; 0x15fe <CLCD_voidInitalization+0x8be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ac:	6f a1       	ldd	r22, Y+39	; 0x27
    15ae:	78 a5       	ldd	r23, Y+40	; 0x28
    15b0:	89 a5       	ldd	r24, Y+41	; 0x29
    15b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e2       	ldi	r20, 0x20	; 32
    15ba:	51 e4       	ldi	r21, 0x41	; 65
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9a a3       	std	Y+34, r25	; 0x22
    15d2:	89 a3       	std	Y+33, r24	; 0x21
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <CLCD_voidInitalization+0x8b4>
    15d6:	88 ec       	ldi	r24, 0xC8	; 200
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	98 a3       	std	Y+32, r25	; 0x20
    15dc:	8f 8f       	std	Y+31, r24	; 0x1f
    15de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15e0:	98 a1       	ldd	r25, Y+32	; 0x20
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <CLCD_voidInitalization+0x8a2>
    15e6:	98 a3       	std	Y+32, r25	; 0x20
    15e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ea:	89 a1       	ldd	r24, Y+33	; 0x21
    15ec:	9a a1       	ldd	r25, Y+34	; 0x22
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	9a a3       	std	Y+34, r25	; 0x22
    15f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f4:	89 a1       	ldd	r24, Y+33	; 0x21
    15f6:	9a a1       	ldd	r25, Y+34	; 0x22
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	69 f7       	brne	.-38     	; 0x15d6 <CLCD_voidInitalization+0x896>
    15fc:	14 c0       	rjmp	.+40     	; 0x1626 <CLCD_voidInitalization+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1600:	7c a1       	ldd	r23, Y+36	; 0x24
    1602:	8d a1       	ldd	r24, Y+37	; 0x25
    1604:	9e a1       	ldd	r25, Y+38	; 0x26
    1606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	9a a3       	std	Y+34, r25	; 0x22
    1610:	89 a3       	std	Y+33, r24	; 0x21
    1612:	89 a1       	ldd	r24, Y+33	; 0x21
    1614:	9a a1       	ldd	r25, Y+34	; 0x22
    1616:	9e 8f       	std	Y+30, r25	; 0x1e
    1618:	8d 8f       	std	Y+29, r24	; 0x1d
    161a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    161c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <CLCD_voidInitalization+0x8de>
    1622:	9e 8f       	std	Y+30, r25	; 0x1e
    1624:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#else #error "Wrong Data Lenght Choice"

#endif
	CLCD_WriteCommand(0b00001111);
    1626:	8f e0       	ldi	r24, 0x0F	; 15
    1628:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <CLCD_WriteCommand>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e4       	ldi	r27, 0x40	; 64
    1634:	89 8f       	std	Y+25, r24	; 0x19
    1636:	9a 8f       	std	Y+26, r25	; 0x1a
    1638:	ab 8f       	std	Y+27, r26	; 0x1b
    163a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	69 8d       	ldd	r22, Y+25	; 0x19
    163e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a ef       	ldi	r20, 0xFA	; 250
    164a:	54 e4       	ldi	r21, 0x44	; 68
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8d 8b       	std	Y+21, r24	; 0x15
    1656:	9e 8b       	std	Y+22, r25	; 0x16
    1658:	af 8b       	std	Y+23, r26	; 0x17
    165a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    165c:	6d 89       	ldd	r22, Y+21	; 0x15
    165e:	7e 89       	ldd	r23, Y+22	; 0x16
    1660:	8f 89       	ldd	r24, Y+23	; 0x17
    1662:	98 8d       	ldd	r25, Y+24	; 0x18
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <CLCD_voidInitalization+0x93e>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 8b       	std	Y+20, r25	; 0x14
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <CLCD_voidInitalization+0x9bc>
	else if (__tmp > 65535)
    167e:	6d 89       	ldd	r22, Y+21	; 0x15
    1680:	7e 89       	ldd	r23, Y+22	; 0x16
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <CLCD_voidInitalization+0x9a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	69 8d       	ldd	r22, Y+25	; 0x19
    1698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
    16be:	0f c0       	rjmp	.+30     	; 0x16de <CLCD_voidInitalization+0x99e>
    16c0:	88 ec       	ldi	r24, 0xC8	; 200
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9a 8b       	std	Y+18, r25	; 0x12
    16c6:	89 8b       	std	Y+17, r24	; 0x11
    16c8:	89 89       	ldd	r24, Y+17	; 0x11
    16ca:	9a 89       	ldd	r25, Y+18	; 0x12
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <CLCD_voidInitalization+0x98c>
    16d0:	9a 8b       	std	Y+18, r25	; 0x12
    16d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8b 89       	ldd	r24, Y+19	; 0x13
    16d6:	9c 89       	ldd	r25, Y+20	; 0x14
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9c 8b       	std	Y+20, r25	; 0x14
    16dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8b 89       	ldd	r24, Y+19	; 0x13
    16e0:	9c 89       	ldd	r25, Y+20	; 0x14
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <CLCD_voidInitalization+0x980>
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <CLCD_voidInitalization+0x9d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ea:	7e 89       	ldd	r23, Y+22	; 0x16
    16ec:	8f 89       	ldd	r24, Y+23	; 0x17
    16ee:	98 8d       	ldd	r25, Y+24	; 0x18
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9c 8b       	std	Y+20, r25	; 0x14
    16fa:	8b 8b       	std	Y+19, r24	; 0x13
    16fc:	8b 89       	ldd	r24, Y+19	; 0x13
    16fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1700:	98 8b       	std	Y+16, r25	; 0x10
    1702:	8f 87       	std	Y+15, r24	; 0x0f
    1704:	8f 85       	ldd	r24, Y+15	; 0x0f
    1706:	98 89       	ldd	r25, Y+16	; 0x10
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <CLCD_voidInitalization+0x9c8>
    170c:	98 8b       	std	Y+16, r25	; 0x10
    170e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);
	CLCD_WriteCommand(1);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <CLCD_WriteCommand>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a0 e8       	ldi	r26, 0x80	; 128
    171c:	b0 e4       	ldi	r27, 0x40	; 64
    171e:	8b 87       	std	Y+11, r24	; 0x0b
    1720:	9c 87       	std	Y+12, r25	; 0x0c
    1722:	ad 87       	std	Y+13, r26	; 0x0d
    1724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a ef       	ldi	r20, 0xFA	; 250
    1734:	54 e4       	ldi	r21, 0x44	; 68
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8f 83       	std	Y+7, r24	; 0x07
    1740:	98 87       	std	Y+8, r25	; 0x08
    1742:	a9 87       	std	Y+9, r26	; 0x09
    1744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <CLCD_voidInitalization+0xa28>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	3f c0       	rjmp	.+126    	; 0x17e6 <CLCD_voidInitalization+0xaa6>
	else if (__tmp > 65535)
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	4c f5       	brge	.+82     	; 0x17d2 <CLCD_voidInitalization+0xa92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <CLCD_voidInitalization+0xa88>
    17aa:	88 ec       	ldi	r24, 0xC8	; 200
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <CLCD_voidInitalization+0xa76>
    17ba:	9c 83       	std	Y+4, r25	; 0x04
    17bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <CLCD_voidInitalization+0xa6a>
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <CLCD_voidInitalization+0xaba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <CLCD_voidInitalization+0xab2>
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);



}
    17fa:	c2 58       	subi	r28, 0x82	; 130
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <CLCD_voidWriteData>:
/*Description:This API shall display Data on CLCD*/
void CLCD_voidWriteData(u8 Copy_u8Data)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	e9 97       	sbiw	r28, 0x39	; 57
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS =1*/
	SetPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN,1);
    1828:	83 e4       	ldi	r24, 0x43	; 67
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	/* Set RW =0  */
	SetPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN,0);
    1832:	83 e4       	ldi	r24, 0x43	; 67
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
	_delay_ms(1);
#elif CLCD_u8_DATA_LENGTH ==FOUR_BIT_MODE
	/*Set high order of the Command */
	CLCD_voidSetHalfDataPort(Copy_u8Data>>4);
    183c:	89 ad       	ldd	r24, Y+57	; 0x39
    183e:	82 95       	swap	r24
    1840:	8f 70       	andi	r24, 0x0F	; 15
    1842:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <CLCD_voidSetHalfDataPort>
	/* Enable Pulses  */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    1846:	83 e4       	ldi	r24, 0x43	; 67
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a0 e8       	ldi	r26, 0x80	; 128
    1856:	bf e3       	ldi	r27, 0x3F	; 63
    1858:	8d ab       	std	Y+53, r24	; 0x35
    185a:	9e ab       	std	Y+54, r25	; 0x36
    185c:	af ab       	std	Y+55, r26	; 0x37
    185e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6d a9       	ldd	r22, Y+53	; 0x35
    1862:	7e a9       	ldd	r23, Y+54	; 0x36
    1864:	8f a9       	ldd	r24, Y+55	; 0x37
    1866:	98 ad       	ldd	r25, Y+56	; 0x38
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	89 ab       	std	Y+49, r24	; 0x31
    187a:	9a ab       	std	Y+50, r25	; 0x32
    187c:	ab ab       	std	Y+51, r26	; 0x33
    187e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1880:	69 a9       	ldd	r22, Y+49	; 0x31
    1882:	7a a9       	ldd	r23, Y+50	; 0x32
    1884:	8b a9       	ldd	r24, Y+51	; 0x33
    1886:	9c a9       	ldd	r25, Y+52	; 0x34
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <CLCD_voidWriteData+0x90>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	98 ab       	std	Y+48, r25	; 0x30
    189e:	8f a7       	std	Y+47, r24	; 0x2f
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <CLCD_voidWriteData+0x10e>
	else if (__tmp > 65535)
    18a2:	69 a9       	ldd	r22, Y+49	; 0x31
    18a4:	7a a9       	ldd	r23, Y+50	; 0x32
    18a6:	8b a9       	ldd	r24, Y+51	; 0x33
    18a8:	9c a9       	ldd	r25, Y+52	; 0x34
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <CLCD_voidWriteData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6d a9       	ldd	r22, Y+53	; 0x35
    18bc:	7e a9       	ldd	r23, Y+54	; 0x36
    18be:	8f a9       	ldd	r24, Y+55	; 0x37
    18c0:	98 ad       	ldd	r25, Y+56	; 0x38
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	98 ab       	std	Y+48, r25	; 0x30
    18e0:	8f a7       	std	Y+47, r24	; 0x2f
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <CLCD_voidWriteData+0xf0>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9e a7       	std	Y+46, r25	; 0x2e
    18ea:	8d a7       	std	Y+45, r24	; 0x2d
    18ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <CLCD_voidWriteData+0xde>
    18f4:	9e a7       	std	Y+46, r25	; 0x2e
    18f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fa:	98 a9       	ldd	r25, Y+48	; 0x30
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	98 ab       	std	Y+48, r25	; 0x30
    1900:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	8f a5       	ldd	r24, Y+47	; 0x2f
    1904:	98 a9       	ldd	r25, Y+48	; 0x30
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <CLCD_voidWriteData+0xd2>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <CLCD_voidWriteData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	69 a9       	ldd	r22, Y+49	; 0x31
    190e:	7a a9       	ldd	r23, Y+50	; 0x32
    1910:	8b a9       	ldd	r24, Y+51	; 0x33
    1912:	9c a9       	ldd	r25, Y+52	; 0x34
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	98 ab       	std	Y+48, r25	; 0x30
    191e:	8f a7       	std	Y+47, r24	; 0x2f
    1920:	8f a5       	ldd	r24, Y+47	; 0x2f
    1922:	98 a9       	ldd	r25, Y+48	; 0x30
    1924:	9c a7       	std	Y+44, r25	; 0x2c
    1926:	8b a7       	std	Y+43, r24	; 0x2b
    1928:	8b a5       	ldd	r24, Y+43	; 0x2b
    192a:	9c a5       	ldd	r25, Y+44	; 0x2c
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <CLCD_voidWriteData+0x11a>
    1930:	9c a7       	std	Y+44, r25	; 0x2c
    1932:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1934:	83 e4       	ldi	r24, 0x43	; 67
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 e8       	ldi	r26, 0x80	; 128
    1944:	bf e3       	ldi	r27, 0x3F	; 63
    1946:	8f a3       	std	Y+39, r24	; 0x27
    1948:	98 a7       	std	Y+40, r25	; 0x28
    194a:	a9 a7       	std	Y+41, r26	; 0x29
    194c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	6f a1       	ldd	r22, Y+39	; 0x27
    1950:	78 a5       	ldd	r23, Y+40	; 0x28
    1952:	89 a5       	ldd	r24, Y+41	; 0x29
    1954:	9a a5       	ldd	r25, Y+42	; 0x2a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a ef       	ldi	r20, 0xFA	; 250
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8b a3       	std	Y+35, r24	; 0x23
    1968:	9c a3       	std	Y+36, r25	; 0x24
    196a:	ad a3       	std	Y+37, r26	; 0x25
    196c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    196e:	6b a1       	ldd	r22, Y+35	; 0x23
    1970:	7c a1       	ldd	r23, Y+36	; 0x24
    1972:	8d a1       	ldd	r24, Y+37	; 0x25
    1974:	9e a1       	ldd	r25, Y+38	; 0x26
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <CLCD_voidWriteData+0x17e>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9a a3       	std	Y+34, r25	; 0x22
    198c:	89 a3       	std	Y+33, r24	; 0x21
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <CLCD_voidWriteData+0x1fc>
	else if (__tmp > 65535)
    1990:	6b a1       	ldd	r22, Y+35	; 0x23
    1992:	7c a1       	ldd	r23, Y+36	; 0x24
    1994:	8d a1       	ldd	r24, Y+37	; 0x25
    1996:	9e a1       	ldd	r25, Y+38	; 0x26
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <CLCD_voidWriteData+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	6f a1       	ldd	r22, Y+39	; 0x27
    19aa:	78 a5       	ldd	r23, Y+40	; 0x28
    19ac:	89 a5       	ldd	r24, Y+41	; 0x29
    19ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a a3       	std	Y+34, r25	; 0x22
    19ce:	89 a3       	std	Y+33, r24	; 0x21
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <CLCD_voidWriteData+0x1de>
    19d2:	88 ec       	ldi	r24, 0xC8	; 200
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	98 a3       	std	Y+32, r25	; 0x20
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
    19da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19dc:	98 a1       	ldd	r25, Y+32	; 0x20
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <CLCD_voidWriteData+0x1cc>
    19e2:	98 a3       	std	Y+32, r25	; 0x20
    19e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	89 a1       	ldd	r24, Y+33	; 0x21
    19e8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9a a3       	std	Y+34, r25	; 0x22
    19ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	89 a1       	ldd	r24, Y+33	; 0x21
    19f2:	9a a1       	ldd	r25, Y+34	; 0x22
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <CLCD_voidWriteData+0x1c0>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <CLCD_voidWriteData+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6b a1       	ldd	r22, Y+35	; 0x23
    19fc:	7c a1       	ldd	r23, Y+36	; 0x24
    19fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1a00:	9e a1       	ldd	r25, Y+38	; 0x26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9a a3       	std	Y+34, r25	; 0x22
    1a0c:	89 a3       	std	Y+33, r24	; 0x21
    1a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a10:	9a a1       	ldd	r25, Y+34	; 0x22
    1a12:	9e 8f       	std	Y+30, r25	; 0x1e
    1a14:	8d 8f       	std	Y+29, r24	; 0x1d
    1a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <CLCD_voidWriteData+0x208>
    1a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a20:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSetHalfDataPort(Copy_u8Data);
    1a22:	89 ad       	ldd	r24, Y+57	; 0x39
    1a24:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <CLCD_voidSetHalfDataPort>
	/* Enable Pulses  */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    1a28:	83 e4       	ldi	r24, 0x43	; 67
    1a2a:	62 e0       	ldi	r22, 0x02	; 2
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e8       	ldi	r26, 0x80	; 128
    1a38:	bf e3       	ldi	r27, 0x3F	; 63
    1a3a:	89 8f       	std	Y+25, r24	; 0x19
    1a3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	69 8d       	ldd	r22, Y+25	; 0x19
    1a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a ef       	ldi	r20, 0xFA	; 250
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8d 8b       	std	Y+21, r24	; 0x15
    1a5c:	9e 8b       	std	Y+22, r25	; 0x16
    1a5e:	af 8b       	std	Y+23, r26	; 0x17
    1a60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a62:	6d 89       	ldd	r22, Y+21	; 0x15
    1a64:	7e 89       	ldd	r23, Y+22	; 0x16
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <CLCD_voidWriteData+0x272>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <CLCD_voidWriteData+0x2f0>
	else if (__tmp > 65535)
    1a84:	6d 89       	ldd	r22, Y+21	; 0x15
    1a86:	7e 89       	ldd	r23, Y+22	; 0x16
    1a88:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <CLCD_voidWriteData+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9c 8b       	std	Y+20, r25	; 0x14
    1ac2:	8b 8b       	std	Y+19, r24	; 0x13
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <CLCD_voidWriteData+0x2d2>
    1ac6:	88 ec       	ldi	r24, 0xC8	; 200
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9a 8b       	std	Y+18, r25	; 0x12
    1acc:	89 8b       	std	Y+17, r24	; 0x11
    1ace:	89 89       	ldd	r24, Y+17	; 0x11
    1ad0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <CLCD_voidWriteData+0x2c0>
    1ad6:	9a 8b       	std	Y+18, r25	; 0x12
    1ad8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8b 89       	ldd	r24, Y+19	; 0x13
    1adc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9c 8b       	std	Y+20, r25	; 0x14
    1ae2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <CLCD_voidWriteData+0x2b4>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <CLCD_voidWriteData+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	6d 89       	ldd	r22, Y+21	; 0x15
    1af0:	7e 89       	ldd	r23, Y+22	; 0x16
    1af2:	8f 89       	ldd	r24, Y+23	; 0x17
    1af4:	98 8d       	ldd	r25, Y+24	; 0x18
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9c 8b       	std	Y+20, r25	; 0x14
    1b00:	8b 8b       	std	Y+19, r24	; 0x13
    1b02:	8b 89       	ldd	r24, Y+19	; 0x13
    1b04:	9c 89       	ldd	r25, Y+20	; 0x14
    1b06:	98 8b       	std	Y+16, r25	; 0x10
    1b08:	8f 87       	std	Y+15, r24	; 0x0f
    1b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0c:	98 89       	ldd	r25, Y+16	; 0x10
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <CLCD_voidWriteData+0x2fc>
    1b12:	98 8b       	std	Y+16, r25	; 0x10
    1b14:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1b16:	83 e4       	ldi	r24, 0x43	; 67
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e8       	ldi	r26, 0x80	; 128
    1b26:	bf e3       	ldi	r27, 0x3F	; 63
    1b28:	8b 87       	std	Y+11, r24	; 0x0b
    1b2a:	9c 87       	std	Y+12, r25	; 0x0c
    1b2c:	ad 87       	std	Y+13, r26	; 0x0d
    1b2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a ef       	ldi	r20, 0xFA	; 250
    1b3e:	54 e4       	ldi	r21, 0x44	; 68
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8f 83       	std	Y+7, r24	; 0x07
    1b4a:	98 87       	std	Y+8, r25	; 0x08
    1b4c:	a9 87       	std	Y+9, r26	; 0x09
    1b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <CLCD_voidWriteData+0x360>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <CLCD_voidWriteData+0x3de>
	else if (__tmp > 65535)
    1b72:	6f 81       	ldd	r22, Y+7	; 0x07
    1b74:	78 85       	ldd	r23, Y+8	; 0x08
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <CLCD_voidWriteData+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <CLCD_voidWriteData+0x3c0>
    1bb4:	88 ec       	ldi	r24, 0xC8	; 200
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <CLCD_voidWriteData+0x3ae>
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	9e 81       	ldd	r25, Y+6	; 0x06
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <CLCD_voidWriteData+0x3a2>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <CLCD_voidWriteData+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <CLCD_voidWriteData+0x3ea>
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#else #error "Wrong Data Length Choice"

#endif

}
    1c04:	e9 96       	adiw	r28, 0x39	; 57
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <CLCD_voidSetHalfDataPort>:

static void CLCD_voidSetHalfDataPort(u8 Copy_u8Data)
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	0f 92       	push	r0
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	89 83       	std	Y+1, r24	; 0x01

	SetPinValue(CLCD_u8_D4_PORT,CLCD_u8_D4_PIN,GET_BIT(Copy_u8Data,0));
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	98 2f       	mov	r25, r24
    1c26:	91 70       	andi	r25, 0x01	; 1
    1c28:	81 e4       	ldi	r24, 0x41	; 65
    1c2a:	64 e0       	ldi	r22, 0x04	; 4
    1c2c:	49 2f       	mov	r20, r25
    1c2e:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	SetPinValue(CLCD_u8_D5_PORT,CLCD_u8_D5_PIN,GET_BIT(Copy_u8Data,1));
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	86 95       	lsr	r24
    1c36:	98 2f       	mov	r25, r24
    1c38:	91 70       	andi	r25, 0x01	; 1
    1c3a:	81 e4       	ldi	r24, 0x41	; 65
    1c3c:	65 e0       	ldi	r22, 0x05	; 5
    1c3e:	49 2f       	mov	r20, r25
    1c40:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	SetPinValue(CLCD_u8_D6_PORT,CLCD_u8_D6_PIN,GET_BIT(Copy_u8Data,2));
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	86 95       	lsr	r24
    1c48:	86 95       	lsr	r24
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	91 70       	andi	r25, 0x01	; 1
    1c4e:	81 e4       	ldi	r24, 0x41	; 65
    1c50:	66 e0       	ldi	r22, 0x06	; 6
    1c52:	49 2f       	mov	r20, r25
    1c54:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	SetPinValue(CLCD_u8_D7_PORT,CLCD_u8_D7_PIN,GET_BIT(Copy_u8Data,3));
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	86 95       	lsr	r24
    1c5c:	86 95       	lsr	r24
    1c5e:	86 95       	lsr	r24
    1c60:	98 2f       	mov	r25, r24
    1c62:	91 70       	andi	r25, 0x01	; 1
    1c64:	81 e4       	ldi	r24, 0x41	; 65
    1c66:	67 e0       	ldi	r22, 0x07	; 7
    1c68:	49 2f       	mov	r20, r25
    1c6a:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>

}
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <CLCD_WriteCommand>:
/*Description:This API shall excute a command on CLCD*/



void CLCD_WriteCommand(u8 Copy_u8Cm)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	e9 97       	sbiw	r28, 0x39	; 57
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS =0*/
	SetPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN,0);
    1c8c:	83 e4       	ldi	r24, 0x43	; 67
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	/* Set RW =0  */
	SetPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN,0);
    1c96:	83 e4       	ldi	r24, 0x43	; 67
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
	_delay_ms(1);
#elif CLCD_u8_DATA_LENGTH == FOUR_BIT_MODE
	/*Set high order of the Command */
	CLCD_voidSetHalfDataPort(Copy_u8Cm>>4);
    1ca0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca2:	82 95       	swap	r24
    1ca4:	8f 70       	andi	r24, 0x0F	; 15
    1ca6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <CLCD_voidSetHalfDataPort>
	/* Enable Pulses  */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    1caa:	83 e4       	ldi	r24, 0x43	; 67
    1cac:	62 e0       	ldi	r22, 0x02	; 2
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	8d ab       	std	Y+53, r24	; 0x35
    1cbe:	9e ab       	std	Y+54, r25	; 0x36
    1cc0:	af ab       	std	Y+55, r26	; 0x37
    1cc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cca:	98 ad       	ldd	r25, Y+56	; 0x38
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a ef       	ldi	r20, 0xFA	; 250
    1cd2:	54 e4       	ldi	r21, 0x44	; 68
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	89 ab       	std	Y+49, r24	; 0x31
    1cde:	9a ab       	std	Y+50, r25	; 0x32
    1ce0:	ab ab       	std	Y+51, r26	; 0x33
    1ce2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ce4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cea:	9c a9       	ldd	r25, Y+52	; 0x34
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <CLCD_WriteCommand+0x90>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <CLCD_WriteCommand+0x10e>
	else if (__tmp > 65535)
    1d06:	69 a9       	ldd	r22, Y+49	; 0x31
    1d08:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <CLCD_WriteCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d20:	7e a9       	ldd	r23, Y+54	; 0x36
    1d22:	8f a9       	ldd	r24, Y+55	; 0x37
    1d24:	98 ad       	ldd	r25, Y+56	; 0x38
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	98 ab       	std	Y+48, r25	; 0x30
    1d44:	8f a7       	std	Y+47, r24	; 0x2f
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <CLCD_WriteCommand+0xf0>
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9e a7       	std	Y+46, r25	; 0x2e
    1d4e:	8d a7       	std	Y+45, r24	; 0x2d
    1d50:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d52:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <CLCD_WriteCommand+0xde>
    1d58:	9e a7       	std	Y+46, r25	; 0x2e
    1d5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	98 ab       	std	Y+48, r25	; 0x30
    1d64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d68:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <CLCD_WriteCommand+0xd2>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <CLCD_WriteCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	69 a9       	ldd	r22, Y+49	; 0x31
    1d72:	7a a9       	ldd	r23, Y+50	; 0x32
    1d74:	8b a9       	ldd	r24, Y+51	; 0x33
    1d76:	9c a9       	ldd	r25, Y+52	; 0x34
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	98 ab       	std	Y+48, r25	; 0x30
    1d82:	8f a7       	std	Y+47, r24	; 0x2f
    1d84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d86:	98 a9       	ldd	r25, Y+48	; 0x30
    1d88:	9c a7       	std	Y+44, r25	; 0x2c
    1d8a:	8b a7       	std	Y+43, r24	; 0x2b
    1d8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <CLCD_WriteCommand+0x11a>
    1d94:	9c a7       	std	Y+44, r25	; 0x2c
    1d96:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1d98:	83 e4       	ldi	r24, 0x43	; 67
    1d9a:	62 e0       	ldi	r22, 0x02	; 2
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 e8       	ldi	r26, 0x80	; 128
    1da8:	bf e3       	ldi	r27, 0x3F	; 63
    1daa:	8f a3       	std	Y+39, r24	; 0x27
    1dac:	98 a7       	std	Y+40, r25	; 0x28
    1dae:	a9 a7       	std	Y+41, r26	; 0x29
    1db0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6f a1       	ldd	r22, Y+39	; 0x27
    1db4:	78 a5       	ldd	r23, Y+40	; 0x28
    1db6:	89 a5       	ldd	r24, Y+41	; 0x29
    1db8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8b a3       	std	Y+35, r24	; 0x23
    1dcc:	9c a3       	std	Y+36, r25	; 0x24
    1dce:	ad a3       	std	Y+37, r26	; 0x25
    1dd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <CLCD_WriteCommand+0x17e>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9a a3       	std	Y+34, r25	; 0x22
    1df0:	89 a3       	std	Y+33, r24	; 0x21
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <CLCD_WriteCommand+0x1fc>
	else if (__tmp > 65535)
    1df4:	6b a1       	ldd	r22, Y+35	; 0x23
    1df6:	7c a1       	ldd	r23, Y+36	; 0x24
    1df8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <CLCD_WriteCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e10:	89 a5       	ldd	r24, Y+41	; 0x29
    1e12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9a a3       	std	Y+34, r25	; 0x22
    1e32:	89 a3       	std	Y+33, r24	; 0x21
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <CLCD_WriteCommand+0x1de>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	98 a3       	std	Y+32, r25	; 0x20
    1e3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e40:	98 a1       	ldd	r25, Y+32	; 0x20
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <CLCD_WriteCommand+0x1cc>
    1e46:	98 a3       	std	Y+32, r25	; 0x20
    1e48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9a a3       	std	Y+34, r25	; 0x22
    1e52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <CLCD_WriteCommand+0x1c0>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <CLCD_WriteCommand+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e60:	7c a1       	ldd	r23, Y+36	; 0x24
    1e62:	8d a1       	ldd	r24, Y+37	; 0x25
    1e64:	9e a1       	ldd	r25, Y+38	; 0x26
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9a a3       	std	Y+34, r25	; 0x22
    1e70:	89 a3       	std	Y+33, r24	; 0x21
    1e72:	89 a1       	ldd	r24, Y+33	; 0x21
    1e74:	9a a1       	ldd	r25, Y+34	; 0x22
    1e76:	9e 8f       	std	Y+30, r25	; 0x1e
    1e78:	8d 8f       	std	Y+29, r24	; 0x1d
    1e7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <CLCD_WriteCommand+0x208>
    1e82:	9e 8f       	std	Y+30, r25	; 0x1e
    1e84:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSetHalfDataPort(Copy_u8Cm);
    1e86:	89 ad       	ldd	r24, Y+57	; 0x39
    1e88:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <CLCD_voidSetHalfDataPort>
	/* Enable Pulses  */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    1e8c:	83 e4       	ldi	r24, 0x43	; 67
    1e8e:	62 e0       	ldi	r22, 0x02	; 2
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 e8       	ldi	r26, 0x80	; 128
    1e9c:	bf e3       	ldi	r27, 0x3F	; 63
    1e9e:	89 8f       	std	Y+25, r24	; 0x19
    1ea0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ea2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ea4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a ef       	ldi	r20, 0xFA	; 250
    1eb4:	54 e4       	ldi	r21, 0x44	; 68
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8d 8b       	std	Y+21, r24	; 0x15
    1ec0:	9e 8b       	std	Y+22, r25	; 0x16
    1ec2:	af 8b       	std	Y+23, r26	; 0x17
    1ec4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e8       	ldi	r20, 0x80	; 128
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <CLCD_WriteCommand+0x272>
		__ticks = 1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9c 8b       	std	Y+20, r25	; 0x14
    1ee4:	8b 8b       	std	Y+19, r24	; 0x13
    1ee6:	3f c0       	rjmp	.+126    	; 0x1f66 <CLCD_WriteCommand+0x2f0>
	else if (__tmp > 65535)
    1ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eea:	7e 89       	ldd	r23, Y+22	; 0x16
    1eec:	8f 89       	ldd	r24, Y+23	; 0x17
    1eee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	4c f5       	brge	.+82     	; 0x1f52 <CLCD_WriteCommand+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f00:	69 8d       	ldd	r22, Y+25	; 0x19
    1f02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	51 e4       	ldi	r21, 0x41	; 65
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9c 8b       	std	Y+20, r25	; 0x14
    1f26:	8b 8b       	std	Y+19, r24	; 0x13
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <CLCD_WriteCommand+0x2d2>
    1f2a:	88 ec       	ldi	r24, 0xC8	; 200
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9a 8b       	std	Y+18, r25	; 0x12
    1f30:	89 8b       	std	Y+17, r24	; 0x11
    1f32:	89 89       	ldd	r24, Y+17	; 0x11
    1f34:	9a 89       	ldd	r25, Y+18	; 0x12
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <CLCD_WriteCommand+0x2c0>
    1f3a:	9a 8b       	std	Y+18, r25	; 0x12
    1f3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f40:	9c 89       	ldd	r25, Y+20	; 0x14
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <CLCD_WriteCommand+0x2b4>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <CLCD_WriteCommand+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	6d 89       	ldd	r22, Y+21	; 0x15
    1f54:	7e 89       	ldd	r23, Y+22	; 0x16
    1f56:	8f 89       	ldd	r24, Y+23	; 0x17
    1f58:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	8b 89       	ldd	r24, Y+19	; 0x13
    1f68:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6a:	98 8b       	std	Y+16, r25	; 0x10
    1f6c:	8f 87       	std	Y+15, r24	; 0x0f
    1f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f70:	98 89       	ldd	r25, Y+16	; 0x10
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <CLCD_WriteCommand+0x2fc>
    1f76:	98 8b       	std	Y+16, r25	; 0x10
    1f78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1f7a:	83 e4       	ldi	r24, 0x43	; 67
    1f7c:	62 e0       	ldi	r22, 0x02	; 2
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 02 12 	call	0x2404	; 0x2404 <SetPinValue>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e8       	ldi	r26, 0x80	; 128
    1f8a:	bf e3       	ldi	r27, 0x3F	; 63
    1f8c:	8b 87       	std	Y+11, r24	; 0x0b
    1f8e:	9c 87       	std	Y+12, r25	; 0x0c
    1f90:	ad 87       	std	Y+13, r26	; 0x0d
    1f92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a ef       	ldi	r20, 0xFA	; 250
    1fa2:	54 e4       	ldi	r21, 0x44	; 68
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8f 83       	std	Y+7, r24	; 0x07
    1fae:	98 87       	std	Y+8, r25	; 0x08
    1fb0:	a9 87       	std	Y+9, r26	; 0x09
    1fb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <CLCD_WriteCommand+0x360>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	3f c0       	rjmp	.+126    	; 0x2054 <CLCD_WriteCommand+0x3de>
	else if (__tmp > 65535)
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	4c f5       	brge	.+82     	; 0x2040 <CLCD_WriteCommand+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <CLCD_WriteCommand+0x3c0>
    2018:	88 ec       	ldi	r24, 0xC8	; 200
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <CLCD_WriteCommand+0x3ae>
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <CLCD_WriteCommand+0x3a2>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <CLCD_WriteCommand+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <CLCD_WriteCommand+0x3ea>
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    2068:	e9 96       	adiw	r28, 0x39	; 57
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <CLCD_voidSetCursor>:



void CLCD_voidSetCursor(u8 Row,u8 Col)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <CLCD_voidSetCursor+0x6>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	6a 83       	std	Y+2, r22	; 0x02
	if (Row==0)
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	88 23       	and	r24, r24
    208c:	21 f4       	brne	.+8      	; 0x2096 <CLCD_voidSetCursor+0x1c>
	{
		CLCD_WriteCommand(CLCD_LINE_1_CMD+Col);
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	80 58       	subi	r24, 0x80	; 128
    2092:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <CLCD_WriteCommand>
	}
	if (Row==1)
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	21 f4       	brne	.+8      	; 0x20a4 <CLCD_voidSetCursor+0x2a>
	{
		CLCD_WriteCommand(CLCD_LINE_2_CMD+Col);
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	80 54       	subi	r24, 0x40	; 64
    20a0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <CLCD_WriteCommand>
	}
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <CLCD_voidWriteString>:


void CLCD_voidWriteString(u8 * Copy_u8Data)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <CLCD_voidWriteString+0x6>
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	9b 83       	std	Y+3, r25	; 0x03
    20bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalLoopCounter=0;
    20be:	19 82       	std	Y+1, r1	; 0x01
    20c0:	0e c0       	rjmp	.+28     	; 0x20de <CLCD_voidWriteString+0x30>
	while(Copy_u8Data[LocalLoopCounter]!='\0')
	{
		CLCD_voidWriteData(Copy_u8Data[LocalLoopCounter]);
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	fc 01       	movw	r30, r24
    20ce:	e2 0f       	add	r30, r18
    20d0:	f3 1f       	adc	r31, r19
    20d2:	80 81       	ld	r24, Z
    20d4:	0e 94 09 0c 	call	0x1812	; 0x1812 <CLCD_voidWriteData>
		LocalLoopCounter++;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	8f 5f       	subi	r24, 0xFF	; 255
    20dc:	89 83       	std	Y+1, r24	; 0x01


void CLCD_voidWriteString(u8 * Copy_u8Data)
{
	u8 LocalLoopCounter=0;
	while(Copy_u8Data[LocalLoopCounter]!='\0')
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	80 81       	ld	r24, Z
    20f0:	88 23       	and	r24, r24
    20f2:	39 f7       	brne	.-50     	; 0x20c2 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidWriteData(Copy_u8Data[LocalLoopCounter]);
		LocalLoopCounter++;
	}
}
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCDWriteInt>:




void LCDWriteInt(u32 x)
{
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	28 97       	sbiw	r28, 0x08	; 8
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	6d 83       	std	Y+5, r22	; 0x05
    211e:	7e 83       	std	Y+6, r23	; 0x06
    2120:	8f 83       	std	Y+7, r24	; 0x07
    2122:	98 87       	std	Y+8, r25	; 0x08
	u32 y=1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a0 e0       	ldi	r26, 0x00	; 0
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	ab 83       	std	Y+3, r26	; 0x03
    2132:	bc 83       	std	Y+4, r27	; 0x04
	if(x==0)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	af 81       	ldd	r26, Y+7	; 0x07
    213a:	b8 85       	ldd	r27, Y+8	; 0x08
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	a1 05       	cpc	r26, r1
    2140:	b1 05       	cpc	r27, r1
    2142:	d1 f5       	brne	.+116    	; 0x21b8 <LCDWriteInt+0xb8>
	{
		CLCD_voidWriteData('0');
    2144:	80 e3       	ldi	r24, 0x30	; 48
    2146:	0e 94 09 0c 	call	0x1812	; 0x1812 <CLCD_voidWriteData>
    214a:	36 c0       	rjmp	.+108    	; 0x21b8 <LCDWriteInt+0xb8>
		CLCD_voidWriteData('-');
		x*=-1;
	}
	while(x!=0)
	{
		y=((y*10)+(x%10));
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	ab 81       	ldd	r26, Y+3	; 0x03
    2152:	bc 81       	ldd	r27, Y+4	; 0x04
    2154:	2a e0       	ldi	r18, 0x0A	; 10
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 84 14 	call	0x2908	; 0x2908 <__mulsi3>
    2164:	7b 01       	movw	r14, r22
    2166:	8c 01       	movw	r16, r24
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	af 81       	ldd	r26, Y+7	; 0x07
    216e:	b8 85       	ldd	r27, Y+8	; 0x08
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 a3 14 	call	0x2946	; 0x2946 <__udivmodsi4>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8e 0d       	add	r24, r14
    2186:	9f 1d       	adc	r25, r15
    2188:	a0 1f       	adc	r26, r16
    218a:	b1 1f       	adc	r27, r17
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	ab 83       	std	Y+3, r26	; 0x03
    2192:	bc 83       	std	Y+4, r27	; 0x04
		x=(x/10);
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	af 81       	ldd	r26, Y+7	; 0x07
    219a:	b8 85       	ldd	r27, Y+8	; 0x08
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 a3 14 	call	0x2946	; 0x2946 <__udivmodsi4>
    21ac:	da 01       	movw	r26, r20
    21ae:	c9 01       	movw	r24, r18
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	9e 83       	std	Y+6, r25	; 0x06
    21b4:	af 83       	std	Y+7, r26	; 0x07
    21b6:	b8 87       	std	Y+8, r27	; 0x08
	if(x<0)
	{
		CLCD_voidWriteData('-');
		x*=-1;
	}
	while(x!=0)
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	af 81       	ldd	r26, Y+7	; 0x07
    21be:	b8 85       	ldd	r27, Y+8	; 0x08
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	a1 05       	cpc	r26, r1
    21c4:	b1 05       	cpc	r27, r1
    21c6:	11 f6       	brne	.-124    	; 0x214c <LCDWriteInt+0x4c>
    21c8:	23 c0       	rjmp	.+70     	; 0x2210 <LCDWriteInt+0x110>
		y=((y*10)+(x%10));
		x=(x/10);
	}
	while(y!=1)
	{
		CLCD_voidWriteData((y%10)+48);
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	ab 81       	ldd	r26, Y+3	; 0x03
    21d0:	bc 81       	ldd	r27, Y+4	; 0x04
    21d2:	2a e0       	ldi	r18, 0x0A	; 10
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 a3 14 	call	0x2946	; 0x2946 <__udivmodsi4>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	80 5d       	subi	r24, 0xD0	; 208
    21e8:	0e 94 09 0c 	call	0x1812	; 0x1812 <CLCD_voidWriteData>
		y=(y/10);
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	ab 81       	ldd	r26, Y+3	; 0x03
    21f2:	bc 81       	ldd	r27, Y+4	; 0x04
    21f4:	2a e0       	ldi	r18, 0x0A	; 10
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 a3 14 	call	0x2946	; 0x2946 <__udivmodsi4>
    2204:	da 01       	movw	r26, r20
    2206:	c9 01       	movw	r24, r18
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	ab 83       	std	Y+3, r26	; 0x03
    220e:	bc 83       	std	Y+4, r27	; 0x04
	while(x!=0)
	{
		y=((y*10)+(x%10));
		x=(x/10);
	}
	while(y!=1)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	ab 81       	ldd	r26, Y+3	; 0x03
    2216:	bc 81       	ldd	r27, Y+4	; 0x04
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	91 05       	cpc	r25, r1
    221c:	a1 05       	cpc	r26, r1
    221e:	b1 05       	cpc	r27, r1
    2220:	a1 f6       	brne	.-88     	; 0x21ca <LCDWriteInt+0xca>
	{
		CLCD_voidWriteData((y%10)+48);
		y=(y/10);
	}
}
    2222:	28 96       	adiw	r28, 0x08	; 8
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	08 95       	ret

0000223c <SetPinDir>:




void SetPinDir(u8 Port,u8 Pin,u8 Dir)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <SetPinDir+0x6>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <SetPinDir+0x8>
    2244:	0f 92       	push	r0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	6a 83       	std	Y+2, r22	; 0x02
    224e:	4b 83       	std	Y+3, r20	; 0x03
switch(Port)
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	3d 83       	std	Y+5, r19	; 0x05
    2258:	2c 83       	std	Y+4, r18	; 0x04
    225a:	8c 81       	ldd	r24, Y+4	; 0x04
    225c:	9d 81       	ldd	r25, Y+5	; 0x05
    225e:	82 34       	cpi	r24, 0x42	; 66
    2260:	91 05       	cpc	r25, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <SetPinDir+0x2a>
    2264:	44 c0       	rjmp	.+136    	; 0x22ee <SetPinDir+0xb2>
    2266:	2c 81       	ldd	r18, Y+4	; 0x04
    2268:	3d 81       	ldd	r19, Y+5	; 0x05
    226a:	23 34       	cpi	r18, 0x43	; 67
    226c:	31 05       	cpc	r19, r1
    226e:	34 f4       	brge	.+12     	; 0x227c <SetPinDir+0x40>
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	9d 81       	ldd	r25, Y+5	; 0x05
    2274:	81 34       	cpi	r24, 0x41	; 65
    2276:	91 05       	cpc	r25, r1
    2278:	71 f0       	breq	.+28     	; 0x2296 <SetPinDir+0x5a>
    227a:	bc c0       	rjmp	.+376    	; 0x23f4 <SetPinDir+0x1b8>
    227c:	2c 81       	ldd	r18, Y+4	; 0x04
    227e:	3d 81       	ldd	r19, Y+5	; 0x05
    2280:	23 34       	cpi	r18, 0x43	; 67
    2282:	31 05       	cpc	r19, r1
    2284:	09 f4       	brne	.+2      	; 0x2288 <SetPinDir+0x4c>
    2286:	5f c0       	rjmp	.+190    	; 0x2346 <SetPinDir+0x10a>
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	84 34       	cpi	r24, 0x44	; 68
    228e:	91 05       	cpc	r25, r1
    2290:	09 f4       	brne	.+2      	; 0x2294 <SetPinDir+0x58>
    2292:	85 c0       	rjmp	.+266    	; 0x239e <SetPinDir+0x162>
    2294:	af c0       	rjmp	.+350    	; 0x23f4 <SetPinDir+0x1b8>
{
case 'A':
if(Dir==0)
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	88 23       	and	r24, r24
    229a:	a9 f4       	brne	.+42     	; 0x22c6 <SetPinDir+0x8a>
  {
	CLR_BIT(DDRA,Pin);
    229c:	aa e3       	ldi	r26, 0x3A	; 58
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ea e3       	ldi	r30, 0x3A	; 58
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <SetPinDir+0x7e>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <SetPinDir+0x7a>
    22be:	80 95       	com	r24
    22c0:	84 23       	and	r24, r20
    22c2:	8c 93       	st	X, r24
    22c4:	97 c0       	rjmp	.+302    	; 0x23f4 <SetPinDir+0x1b8>
  }
  else 
  {

  //DDRA=DDRA|(1<<Pin);
	  SET_BIT(DDRA,Pin);
    22c6:	aa e3       	ldi	r26, 0x3A	; 58
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	ea e3       	ldi	r30, 0x3A	; 58
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	48 2f       	mov	r20, r24
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 2e       	mov	r0, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <SetPinDir+0xa8>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <SetPinDir+0xa4>
    22e8:	84 2b       	or	r24, r20
    22ea:	8c 93       	st	X, r24
    22ec:	83 c0       	rjmp	.+262    	; 0x23f4 <SetPinDir+0x1b8>
  }
break;
case 'B':
if(Dir==0)
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	88 23       	and	r24, r24
    22f2:	a9 f4       	brne	.+42     	; 0x231e <SetPinDir+0xe2>
  {
	CLR_BIT(DDRB,Pin);
    22f4:	a7 e3       	ldi	r26, 0x37	; 55
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e7 e3       	ldi	r30, 0x37	; 55
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	48 2f       	mov	r20, r24
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 2e       	mov	r0, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <SetPinDir+0xd6>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	0a 94       	dec	r0
    2314:	e2 f7       	brpl	.-8      	; 0x230e <SetPinDir+0xd2>
    2316:	80 95       	com	r24
    2318:	84 23       	and	r24, r20
    231a:	8c 93       	st	X, r24
    231c:	6b c0       	rjmp	.+214    	; 0x23f4 <SetPinDir+0x1b8>
    //DDRB=DDRB&~(1<<Pin);
  }
  else 
  {
  //DDRB=DDRB|(1<<Pin);
	  SET_BIT(DDRB,Pin);
    231e:	a7 e3       	ldi	r26, 0x37	; 55
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e7 e3       	ldi	r30, 0x37	; 55
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	48 2f       	mov	r20, r24
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	02 2e       	mov	r0, r18
    2336:	02 c0       	rjmp	.+4      	; 0x233c <SetPinDir+0x100>
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	0a 94       	dec	r0
    233e:	e2 f7       	brpl	.-8      	; 0x2338 <SetPinDir+0xfc>
    2340:	84 2b       	or	r24, r20
    2342:	8c 93       	st	X, r24
    2344:	57 c0       	rjmp	.+174    	; 0x23f4 <SetPinDir+0x1b8>
  }
break;
case 'C':
if(Dir==0)
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	88 23       	and	r24, r24
    234a:	a9 f4       	brne	.+42     	; 0x2376 <SetPinDir+0x13a>
  {
  //  DDRC=DDRC&~(1<<Pin);
	CLR_BIT(DDRC,Pin);
    234c:	a4 e3       	ldi	r26, 0x34	; 52
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e4 e3       	ldi	r30, 0x34	; 52
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 2e       	mov	r0, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <SetPinDir+0x12e>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <SetPinDir+0x12a>
    236e:	80 95       	com	r24
    2370:	84 23       	and	r24, r20
    2372:	8c 93       	st	X, r24
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <SetPinDir+0x1b8>
  }
  else 
  {
  //DDRC=DDRC|(1<<Pin);
	  SET_BIT(DDRC,Pin);
    2376:	a4 e3       	ldi	r26, 0x34	; 52
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e4 e3       	ldi	r30, 0x34	; 52
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	48 2f       	mov	r20, r24
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	02 2e       	mov	r0, r18
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <SetPinDir+0x158>
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	0a 94       	dec	r0
    2396:	e2 f7       	brpl	.-8      	; 0x2390 <SetPinDir+0x154>
    2398:	84 2b       	or	r24, r20
    239a:	8c 93       	st	X, r24
    239c:	2b c0       	rjmp	.+86     	; 0x23f4 <SetPinDir+0x1b8>
  }
break;
case 'D':
if(Dir==0)
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	88 23       	and	r24, r24
    23a2:	a9 f4       	brne	.+42     	; 0x23ce <SetPinDir+0x192>
  {
    DDRD=DDRD&~(1<<Pin);
    23a4:	a1 e3       	ldi	r26, 0x31	; 49
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e1 e3       	ldi	r30, 0x31	; 49
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	48 2f       	mov	r20, r24
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 2e       	mov	r0, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <SetPinDir+0x186>
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <SetPinDir+0x182>
    23c6:	80 95       	com	r24
    23c8:	84 23       	and	r24, r20
    23ca:	8c 93       	st	X, r24
    23cc:	13 c0       	rjmp	.+38     	; 0x23f4 <SetPinDir+0x1b8>
    
  }
  else 
  {
  //DDRD=DDRD|(1<<Pin);
	  SET_BIT(DDRD,Pin);
    23ce:	a1 e3       	ldi	r26, 0x31	; 49
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e1 e3       	ldi	r30, 0x31	; 49
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	48 2f       	mov	r20, r24
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	02 2e       	mov	r0, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <SetPinDir+0x1b0>
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	0a 94       	dec	r0
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <SetPinDir+0x1ac>
    23f0:	84 2b       	or	r24, r20
    23f2:	8c 93       	st	X, r24
  }
break;
}
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <SetPinValue>:



void SetPinValue(u8 Port,u8 Pin,u8 Val)

{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <SetPinValue+0x6>
    240a:	00 d0       	rcall	.+0      	; 0x240c <SetPinValue+0x8>
    240c:	0f 92       	push	r0
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	6a 83       	std	Y+2, r22	; 0x02
    2416:	4b 83       	std	Y+3, r20	; 0x03
switch(Port)
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	3d 83       	std	Y+5, r19	; 0x05
    2420:	2c 83       	std	Y+4, r18	; 0x04
    2422:	8c 81       	ldd	r24, Y+4	; 0x04
    2424:	9d 81       	ldd	r25, Y+5	; 0x05
    2426:	82 34       	cpi	r24, 0x42	; 66
    2428:	91 05       	cpc	r25, r1
    242a:	09 f4       	brne	.+2      	; 0x242e <SetPinValue+0x2a>
    242c:	44 c0       	rjmp	.+136    	; 0x24b6 <SetPinValue+0xb2>
    242e:	2c 81       	ldd	r18, Y+4	; 0x04
    2430:	3d 81       	ldd	r19, Y+5	; 0x05
    2432:	23 34       	cpi	r18, 0x43	; 67
    2434:	31 05       	cpc	r19, r1
    2436:	34 f4       	brge	.+12     	; 0x2444 <SetPinValue+0x40>
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	81 34       	cpi	r24, 0x41	; 65
    243e:	91 05       	cpc	r25, r1
    2440:	71 f0       	breq	.+28     	; 0x245e <SetPinValue+0x5a>
    2442:	bc c0       	rjmp	.+376    	; 0x25bc <SetPinValue+0x1b8>
    2444:	2c 81       	ldd	r18, Y+4	; 0x04
    2446:	3d 81       	ldd	r19, Y+5	; 0x05
    2448:	23 34       	cpi	r18, 0x43	; 67
    244a:	31 05       	cpc	r19, r1
    244c:	09 f4       	brne	.+2      	; 0x2450 <SetPinValue+0x4c>
    244e:	5f c0       	rjmp	.+190    	; 0x250e <SetPinValue+0x10a>
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	84 34       	cpi	r24, 0x44	; 68
    2456:	91 05       	cpc	r25, r1
    2458:	09 f4       	brne	.+2      	; 0x245c <SetPinValue+0x58>
    245a:	85 c0       	rjmp	.+266    	; 0x2566 <SetPinValue+0x162>
    245c:	af c0       	rjmp	.+350    	; 0x25bc <SetPinValue+0x1b8>
{
case 'A':
if(Val==0)
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	88 23       	and	r24, r24
    2462:	a9 f4       	brne	.+42     	; 0x248e <SetPinValue+0x8a>
  {
	CLR_BIT(PORTA,Pin);
    2464:	ab e3       	ldi	r26, 0x3B	; 59
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	eb e3       	ldi	r30, 0x3B	; 59
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	48 2f       	mov	r20, r24
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	02 2e       	mov	r0, r18
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <SetPinValue+0x7e>
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	0a 94       	dec	r0
    2484:	e2 f7       	brpl	.-8      	; 0x247e <SetPinValue+0x7a>
    2486:	80 95       	com	r24
    2488:	84 23       	and	r24, r20
    248a:	8c 93       	st	X, r24
    248c:	97 c0       	rjmp	.+302    	; 0x25bc <SetPinValue+0x1b8>
    
  }
  else 
  {
  //PORTA=PORTA|(1<<Pin);
	  SET_BIT(PORTA,Pin);
    248e:	ab e3       	ldi	r26, 0x3B	; 59
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	eb e3       	ldi	r30, 0x3B	; 59
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	48 2f       	mov	r20, r24
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 2e       	mov	r0, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <SetPinValue+0xa8>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0a 94       	dec	r0
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <SetPinValue+0xa4>
    24b0:	84 2b       	or	r24, r20
    24b2:	8c 93       	st	X, r24
    24b4:	83 c0       	rjmp	.+262    	; 0x25bc <SetPinValue+0x1b8>
  }
break;
case 'B':
if(Val==0)
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	88 23       	and	r24, r24
    24ba:	a9 f4       	brne	.+42     	; 0x24e6 <SetPinValue+0xe2>
  {
    //PORTB=PORTB&~(1<<Pin);
	CLR_BIT(PORTB,Pin);
    24bc:	a8 e3       	ldi	r26, 0x38	; 56
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e8 e3       	ldi	r30, 0x38	; 56
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	48 2f       	mov	r20, r24
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 2e       	mov	r0, r18
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <SetPinValue+0xd6>
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	0a 94       	dec	r0
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <SetPinValue+0xd2>
    24de:	80 95       	com	r24
    24e0:	84 23       	and	r24, r20
    24e2:	8c 93       	st	X, r24
    24e4:	6b c0       	rjmp	.+214    	; 0x25bc <SetPinValue+0x1b8>
  }
  else 
  {
  //PORTB=PORTB|(1<<Pin);
	  SET_BIT(PORTB,Pin);
    24e6:	a8 e3       	ldi	r26, 0x38	; 56
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e8 e3       	ldi	r30, 0x38	; 56
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	48 2f       	mov	r20, r24
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	02 2e       	mov	r0, r18
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <SetPinValue+0x100>
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	0a 94       	dec	r0
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <SetPinValue+0xfc>
    2508:	84 2b       	or	r24, r20
    250a:	8c 93       	st	X, r24
    250c:	57 c0       	rjmp	.+174    	; 0x25bc <SetPinValue+0x1b8>
  }
break;
case 'C':
if(Val==0)
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	88 23       	and	r24, r24
    2512:	a9 f4       	brne	.+42     	; 0x253e <SetPinValue+0x13a>
  {
    //PORTC=PORTC&~(1<<Pin);
	CLR_BIT(PORTC,Pin);
    2514:	a5 e3       	ldi	r26, 0x35	; 53
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e5 e3       	ldi	r30, 0x35	; 53
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	48 2f       	mov	r20, r24
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	02 2e       	mov	r0, r18
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <SetPinValue+0x12e>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <SetPinValue+0x12a>
    2536:	80 95       	com	r24
    2538:	84 23       	and	r24, r20
    253a:	8c 93       	st	X, r24
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <SetPinValue+0x1b8>
  }
  else 
  {
	  SET_BIT(PORTC,Pin);
    253e:	a5 e3       	ldi	r26, 0x35	; 53
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e5 e3       	ldi	r30, 0x35	; 53
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	48 2f       	mov	r20, r24
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	02 2e       	mov	r0, r18
    2556:	02 c0       	rjmp	.+4      	; 0x255c <SetPinValue+0x158>
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	0a 94       	dec	r0
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <SetPinValue+0x154>
    2560:	84 2b       	or	r24, r20
    2562:	8c 93       	st	X, r24
    2564:	2b c0       	rjmp	.+86     	; 0x25bc <SetPinValue+0x1b8>
  //PORTC=PORTC|(1<<Pin);
  }
break;
case 'D':
if(Val==0)
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	88 23       	and	r24, r24
    256a:	a9 f4       	brne	.+42     	; 0x2596 <SetPinValue+0x192>
  {
    //PORTD=PORTD&~(1<<Pin);
	CLR_BIT(PORTD,Pin);
    256c:	a2 e3       	ldi	r26, 0x32	; 50
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e2 e3       	ldi	r30, 0x32	; 50
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	48 2f       	mov	r20, r24
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	02 2e       	mov	r0, r18
    2584:	02 c0       	rjmp	.+4      	; 0x258a <SetPinValue+0x186>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	0a 94       	dec	r0
    258c:	e2 f7       	brpl	.-8      	; 0x2586 <SetPinValue+0x182>
    258e:	80 95       	com	r24
    2590:	84 23       	and	r24, r20
    2592:	8c 93       	st	X, r24
    2594:	13 c0       	rjmp	.+38     	; 0x25bc <SetPinValue+0x1b8>
  }
  else 
  {
	  SET_BIT(PORTD,Pin);
    2596:	a2 e3       	ldi	r26, 0x32	; 50
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e2 e3       	ldi	r30, 0x32	; 50
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	48 2f       	mov	r20, r24
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	02 2e       	mov	r0, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <SetPinValue+0x1b0>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	0a 94       	dec	r0
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <SetPinValue+0x1ac>
    25b8:	84 2b       	or	r24, r20
    25ba:	8c 93       	st	X, r24
  //PORTD=PORTD|(1<<Pin);
  }
break;
}
}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <SetPortDir>:

void SetPortDir(u8 Port,u8 Dir)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <SetPortDir+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <SetPortDir+0x8>
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	6a 83       	std	Y+2, r22	; 0x02
switch(Port)
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	3c 83       	std	Y+4, r19	; 0x04
    25e4:	2b 83       	std	Y+3, r18	; 0x03
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	82 34       	cpi	r24, 0x42	; 66
    25ec:	91 05       	cpc	r25, r1
    25ee:	d9 f0       	breq	.+54     	; 0x2626 <SetPortDir+0x5a>
    25f0:	2b 81       	ldd	r18, Y+3	; 0x03
    25f2:	3c 81       	ldd	r19, Y+4	; 0x04
    25f4:	23 34       	cpi	r18, 0x43	; 67
    25f6:	31 05       	cpc	r19, r1
    25f8:	34 f4       	brge	.+12     	; 0x2606 <SetPortDir+0x3a>
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	81 34       	cpi	r24, 0x41	; 65
    2600:	91 05       	cpc	r25, r1
    2602:	61 f0       	breq	.+24     	; 0x261c <SetPortDir+0x50>
    2604:	1e c0       	rjmp	.+60     	; 0x2642 <SetPortDir+0x76>
    2606:	2b 81       	ldd	r18, Y+3	; 0x03
    2608:	3c 81       	ldd	r19, Y+4	; 0x04
    260a:	23 34       	cpi	r18, 0x43	; 67
    260c:	31 05       	cpc	r19, r1
    260e:	81 f0       	breq	.+32     	; 0x2630 <SetPortDir+0x64>
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	84 34       	cpi	r24, 0x44	; 68
    2616:	91 05       	cpc	r25, r1
    2618:	81 f0       	breq	.+32     	; 0x263a <SetPortDir+0x6e>
    261a:	13 c0       	rjmp	.+38     	; 0x2642 <SetPortDir+0x76>
{
case 'A':
	DDRA=Dir;
    261c:	ea e3       	ldi	r30, 0x3A	; 58
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	80 83       	st	Z, r24
    2624:	0e c0       	rjmp	.+28     	; 0x2642 <SetPortDir+0x76>
break;
case 'B':
	DDRB=Dir;
    2626:	e7 e3       	ldi	r30, 0x37	; 55
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	80 83       	st	Z, r24
    262e:	09 c0       	rjmp	.+18     	; 0x2642 <SetPortDir+0x76>
break;
case 'C':
	DDRC=Dir;
    2630:	e4 e3       	ldi	r30, 0x34	; 52
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	80 83       	st	Z, r24
    2638:	04 c0       	rjmp	.+8      	; 0x2642 <SetPortDir+0x76>
break;
case 'D':
	DDRD=Dir;
    263a:	e1 e3       	ldi	r30, 0x31	; 49
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	80 83       	st	Z, r24
break;


}

}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <SetPortValue>:


void SetPortValue(u8 Port,u8 Val)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	00 d0       	rcall	.+0      	; 0x2656 <SetPortValue+0x6>
    2656:	00 d0       	rcall	.+0      	; 0x2658 <SetPortValue+0x8>
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	6a 83       	std	Y+2, r22	; 0x02
switch(Port)
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	3c 83       	std	Y+4, r19	; 0x04
    2668:	2b 83       	std	Y+3, r18	; 0x03
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	82 34       	cpi	r24, 0x42	; 66
    2670:	91 05       	cpc	r25, r1
    2672:	d9 f0       	breq	.+54     	; 0x26aa <SetPortValue+0x5a>
    2674:	2b 81       	ldd	r18, Y+3	; 0x03
    2676:	3c 81       	ldd	r19, Y+4	; 0x04
    2678:	23 34       	cpi	r18, 0x43	; 67
    267a:	31 05       	cpc	r19, r1
    267c:	34 f4       	brge	.+12     	; 0x268a <SetPortValue+0x3a>
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	81 34       	cpi	r24, 0x41	; 65
    2684:	91 05       	cpc	r25, r1
    2686:	61 f0       	breq	.+24     	; 0x26a0 <SetPortValue+0x50>
    2688:	1e c0       	rjmp	.+60     	; 0x26c6 <SetPortValue+0x76>
    268a:	2b 81       	ldd	r18, Y+3	; 0x03
    268c:	3c 81       	ldd	r19, Y+4	; 0x04
    268e:	23 34       	cpi	r18, 0x43	; 67
    2690:	31 05       	cpc	r19, r1
    2692:	81 f0       	breq	.+32     	; 0x26b4 <SetPortValue+0x64>
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	84 34       	cpi	r24, 0x44	; 68
    269a:	91 05       	cpc	r25, r1
    269c:	81 f0       	breq	.+32     	; 0x26be <SetPortValue+0x6e>
    269e:	13 c0       	rjmp	.+38     	; 0x26c6 <SetPortValue+0x76>
{
case 'A':
	PORTA=Val;
    26a0:	eb e3       	ldi	r30, 0x3B	; 59
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	80 83       	st	Z, r24
    26a8:	0e c0       	rjmp	.+28     	; 0x26c6 <SetPortValue+0x76>
break;
case 'B':
	PORTB=Val;
    26aa:	e8 e3       	ldi	r30, 0x38	; 56
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	80 83       	st	Z, r24
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <SetPortValue+0x76>
break;
case 'C':
	PORTC=Val;
    26b4:	e5 e3       	ldi	r30, 0x35	; 53
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	80 83       	st	Z, r24
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <SetPortValue+0x76>
break;
case 'D':
	PORTD=Val;
    26be:	e2 e3       	ldi	r30, 0x32	; 50
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	80 83       	st	Z, r24
break;


}

}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <GetPinValue>:

u8 GetPinValue(u8 Port,u8 Pin)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	00 d0       	rcall	.+0      	; 0x26da <GetPinValue+0x6>
    26da:	00 d0       	rcall	.+0      	; 0x26dc <GetPinValue+0x8>
    26dc:	0f 92       	push	r0
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	8a 83       	std	Y+2, r24	; 0x02
    26e4:	6b 83       	std	Y+3, r22	; 0x03
u8 result;
switch(Port)
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	3d 83       	std	Y+5, r19	; 0x05
    26ee:	2c 83       	std	Y+4, r18	; 0x04
    26f0:	4c 81       	ldd	r20, Y+4	; 0x04
    26f2:	5d 81       	ldd	r21, Y+5	; 0x05
    26f4:	42 34       	cpi	r20, 0x42	; 66
    26f6:	51 05       	cpc	r21, r1
    26f8:	41 f1       	breq	.+80     	; 0x274a <GetPinValue+0x76>
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	83 34       	cpi	r24, 0x43	; 67
    2700:	91 05       	cpc	r25, r1
    2702:	34 f4       	brge	.+12     	; 0x2710 <GetPinValue+0x3c>
    2704:	2c 81       	ldd	r18, Y+4	; 0x04
    2706:	3d 81       	ldd	r19, Y+5	; 0x05
    2708:	21 34       	cpi	r18, 0x41	; 65
    270a:	31 05       	cpc	r19, r1
    270c:	61 f0       	breq	.+24     	; 0x2726 <GetPinValue+0x52>
    270e:	52 c0       	rjmp	.+164    	; 0x27b4 <GetPinValue+0xe0>
    2710:	4c 81       	ldd	r20, Y+4	; 0x04
    2712:	5d 81       	ldd	r21, Y+5	; 0x05
    2714:	43 34       	cpi	r20, 0x43	; 67
    2716:	51 05       	cpc	r21, r1
    2718:	51 f1       	breq	.+84     	; 0x276e <GetPinValue+0x9a>
    271a:	8c 81       	ldd	r24, Y+4	; 0x04
    271c:	9d 81       	ldd	r25, Y+5	; 0x05
    271e:	84 34       	cpi	r24, 0x44	; 68
    2720:	91 05       	cpc	r25, r1
    2722:	b9 f1       	breq	.+110    	; 0x2792 <GetPinValue+0xbe>
    2724:	47 c0       	rjmp	.+142    	; 0x27b4 <GetPinValue+0xe0>
{
case 'A':
	result=GET_BIT(PINA,Pin);
    2726:	e9 e3       	ldi	r30, 0x39	; 57
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a9 01       	movw	r20, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <GetPinValue+0x6a>
    273a:	55 95       	asr	r21
    273c:	47 95       	ror	r20
    273e:	8a 95       	dec	r24
    2740:	e2 f7       	brpl	.-8      	; 0x273a <GetPinValue+0x66>
    2742:	ca 01       	movw	r24, r20
    2744:	81 70       	andi	r24, 0x01	; 1
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	35 c0       	rjmp	.+106    	; 0x27b4 <GetPinValue+0xe0>
 break;
case 'B':
	result=GET_BIT(PINB,Pin);
    274a:	e6 e3       	ldi	r30, 0x36	; 54
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	88 2f       	mov	r24, r24
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a9 01       	movw	r20, r18
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <GetPinValue+0x8e>
    275e:	55 95       	asr	r21
    2760:	47 95       	ror	r20
    2762:	8a 95       	dec	r24
    2764:	e2 f7       	brpl	.-8      	; 0x275e <GetPinValue+0x8a>
    2766:	ca 01       	movw	r24, r20
    2768:	81 70       	andi	r24, 0x01	; 1
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	23 c0       	rjmp	.+70     	; 0x27b4 <GetPinValue+0xe0>
break;
case 'C':
	result=GET_BIT(PINC,Pin);
    276e:	e3 e3       	ldi	r30, 0x33	; 51
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a9 01       	movw	r20, r18
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <GetPinValue+0xb2>
    2782:	55 95       	asr	r21
    2784:	47 95       	ror	r20
    2786:	8a 95       	dec	r24
    2788:	e2 f7       	brpl	.-8      	; 0x2782 <GetPinValue+0xae>
    278a:	ca 01       	movw	r24, r20
    278c:	81 70       	andi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	11 c0       	rjmp	.+34     	; 0x27b4 <GetPinValue+0xe0>
break;
case 'D':
	result=GET_BIT(PIND,Pin);
    2792:	e0 e3       	ldi	r30, 0x30	; 48
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a9 01       	movw	r20, r18
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <GetPinValue+0xd6>
    27a6:	55 95       	asr	r21
    27a8:	47 95       	ror	r20
    27aa:	8a 95       	dec	r24
    27ac:	e2 f7       	brpl	.-8      	; 0x27a6 <GetPinValue+0xd2>
    27ae:	ca 01       	movw	r24, r20
    27b0:	81 70       	andi	r24, 0x01	; 1
    27b2:	89 83       	std	Y+1, r24	; 0x01
break;
}
return result;
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <PortInitialization>:
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"

void PortInitialization (void)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
DDRA=PORTA_DIR;
    27ce:	ea e3       	ldi	r30, 0x3A	; 58
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	8f ef       	ldi	r24, 0xFF	; 255
    27d4:	80 83       	st	Z, r24
DDRB=PORTB_DIR;
    27d6:	e7 e3       	ldi	r30, 0x37	; 55
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	8f ef       	ldi	r24, 0xFF	; 255
    27dc:	80 83       	st	Z, r24
DDRC=PORTC_DIR;
    27de:	e4 e3       	ldi	r30, 0x34	; 52
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	80 83       	st	Z, r24
DDRD=PORTD_DIR;
    27e6:	e1 e3       	ldi	r30, 0x31	; 49
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	8b e3       	ldi	r24, 0x3B	; 59
    27ec:	80 83       	st	Z, r24

PORTA=PORTA_Init;
    27ee:	eb e3       	ldi	r30, 0x3B	; 59
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	80 83       	st	Z, r24
PORTB=PORTB_Init;
    27f6:	e8 e3       	ldi	r30, 0x38	; 56
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	8c ef       	ldi	r24, 0xFC	; 252
    27fc:	80 83       	st	Z, r24
PORTC=PORTC_Init;
    27fe:	e5 e3       	ldi	r30, 0x35	; 53
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	10 82       	st	Z, r1
PORTD=PORTD_Init;
    2804:	e2 e3       	ldi	r30, 0x32	; 50
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	8d eb       	ldi	r24, 0xBD	; 189
    280a:	80 83       	st	Z, r24

}
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <__vector_10>:
 */
#if ((GI == 1) && CTC_Mode==Enable )
	#if OCIE0 == Enable
		void __vector_10 (void)  __attribute__((signal,__INTR_ATTRS));
		void __vector_10 (void)
		{
    2812:	1f 92       	push	r1
    2814:	0f 92       	push	r0
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	0f 92       	push	r0
    281a:	11 24       	eor	r1, r1
    281c:	8f 93       	push	r24
    281e:	9f 93       	push	r25
    2820:	af 93       	push	r26
    2822:	bf 93       	push	r27
    2824:	ef 93       	push	r30
    2826:	ff 93       	push	r31
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
			Timer0_CTC_Counter++;
    2830:	80 91 70 00 	lds	r24, 0x0070
    2834:	90 91 71 00 	lds	r25, 0x0071
    2838:	01 96       	adiw	r24, 0x01	; 1
    283a:	90 93 71 00 	sts	0x0071, r25
    283e:	80 93 70 00 	sts	0x0070, r24
			if(200==Timer0_CTC_Counter)
    2842:	80 91 70 00 	lds	r24, 0x0070
    2846:	90 91 71 00 	lds	r25, 0x0071
    284a:	88 3c       	cpi	r24, 0xC8	; 200
    284c:	91 05       	cpc	r25, r1
    284e:	61 f4       	brne	.+24     	; 0x2868 <__vector_10+0x56>
			{
				TOGGLE_BIT(PORTA,0);
    2850:	ab e3       	ldi	r26, 0x3B	; 59
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	eb e3       	ldi	r30, 0x3B	; 59
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	90 81       	ld	r25, Z
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	89 27       	eor	r24, r25
    285e:	8c 93       	st	X, r24
				Timer0_CTC_Counter=0;
    2860:	10 92 71 00 	sts	0x0071, r1
    2864:	10 92 70 00 	sts	0x0070, r1
			}
		}
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	ff 91       	pop	r31
    286e:	ef 91       	pop	r30
    2870:	bf 91       	pop	r27
    2872:	af 91       	pop	r26
    2874:	9f 91       	pop	r25
    2876:	8f 91       	pop	r24
    2878:	0f 90       	pop	r0
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	0f 90       	pop	r0
    287e:	1f 90       	pop	r1
    2880:	18 95       	reti

00002882 <Timer0_voidInit>:

#endif


void Timer0_voidInit(void)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62

	#if GI == Enable
		/*set the Global interrupt bit value*/
		SET_BIT(SREG,GI_bit);
    288a:	af e5       	ldi	r26, 0x5F	; 95
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ef e5       	ldi	r30, 0x5F	; 95
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 68       	ori	r24, 0x80	; 128
    2896:	8c 93       	st	X, r24
	#endif

	/*fill the value of the TCCR0 Register according to the Configuration*/
	TCCR0 |= (FOC0 << FOC0_bit) | (WGM00 << WGM00_bit) | (COM01 << COM01_bit)
    2898:	a3 e5       	ldi	r26, 0x53	; 83
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e3 e5       	ldi	r30, 0x53	; 83
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	8a 66       	ori	r24, 0x6A	; 106
    28a4:	8c 93       	st	X, r24
			| (COM00 << COM00_bit) | (WGM01 << WGM01_bit) | (CS02 << CS02_bit)
			| (CS01 << CS01_bit) | (CS00 << CS00_bit);

	/*fill the value of the TIMSK0 Register according to the Configuration*/
	#if ((OCIE0 == 1) && (CTC_Mode==Enable))
	OCR0=OCR0_Value;
    28a6:	ec e5       	ldi	r30, 0x5C	; 92
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 e8       	ldi	r24, 0x80	; 128
    28ac:	80 83       	st	Z, r24
	TIMSK |= (OCIE0<<OCIE0_bit);
    28ae:	a9 e5       	ldi	r26, 0x59	; 89
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e9 e5       	ldi	r30, 0x59	; 89
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	82 60       	ori	r24, 0x02	; 2
    28ba:	8c 93       	st	X, r24
	#endif




}
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <timer1_pwm_init>:


void timer1_pwm_init(void)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    28ca:	af e5       	ldi	r26, 0x5F	; 95
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	ef e5       	ldi	r30, 0x5F	; 95
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	80 68       	ori	r24, 0x80	; 128
    28d6:	8c 93       	st	X, r24

	TCCR1A = 0b00000000;
    28d8:	ef e4       	ldi	r30, 0x4F	; 79
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	10 82       	st	Z, r1
	TCCR1B = 0b01000001;
    28de:	ee e4       	ldi	r30, 0x4E	; 78
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	81 e4       	ldi	r24, 0x41	; 65
    28e4:	80 83       	st	Z, r24

	//enable overflow interrupt
	SET_BIT(TIMSK,2);
    28e6:	a9 e5       	ldi	r26, 0x59	; 89
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e9 e5       	ldi	r30, 0x59	; 89
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	84 60       	ori	r24, 0x04	; 4
    28f2:	8c 93       	st	X, r24
	//enable Input capture interrupt
	SET_BIT(TIMSK,5);
    28f4:	a9 e5       	ldi	r26, 0x59	; 89
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e9 e5       	ldi	r30, 0x59	; 89
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	80 62       	ori	r24, 0x20	; 32
    2900:	8c 93       	st	X, r24

	//set pin D6(ICP) as Input because it will read the PWM signal
	//DIOSetPinDirection(3,6,0);
}
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <__mulsi3>:
    2908:	62 9f       	mul	r22, r18
    290a:	d0 01       	movw	r26, r0
    290c:	73 9f       	mul	r23, r19
    290e:	f0 01       	movw	r30, r0
    2910:	82 9f       	mul	r24, r18
    2912:	e0 0d       	add	r30, r0
    2914:	f1 1d       	adc	r31, r1
    2916:	64 9f       	mul	r22, r20
    2918:	e0 0d       	add	r30, r0
    291a:	f1 1d       	adc	r31, r1
    291c:	92 9f       	mul	r25, r18
    291e:	f0 0d       	add	r31, r0
    2920:	83 9f       	mul	r24, r19
    2922:	f0 0d       	add	r31, r0
    2924:	74 9f       	mul	r23, r20
    2926:	f0 0d       	add	r31, r0
    2928:	65 9f       	mul	r22, r21
    292a:	f0 0d       	add	r31, r0
    292c:	99 27       	eor	r25, r25
    292e:	72 9f       	mul	r23, r18
    2930:	b0 0d       	add	r27, r0
    2932:	e1 1d       	adc	r30, r1
    2934:	f9 1f       	adc	r31, r25
    2936:	63 9f       	mul	r22, r19
    2938:	b0 0d       	add	r27, r0
    293a:	e1 1d       	adc	r30, r1
    293c:	f9 1f       	adc	r31, r25
    293e:	bd 01       	movw	r22, r26
    2940:	cf 01       	movw	r24, r30
    2942:	11 24       	eor	r1, r1
    2944:	08 95       	ret

00002946 <__udivmodsi4>:
    2946:	a1 e2       	ldi	r26, 0x21	; 33
    2948:	1a 2e       	mov	r1, r26
    294a:	aa 1b       	sub	r26, r26
    294c:	bb 1b       	sub	r27, r27
    294e:	fd 01       	movw	r30, r26
    2950:	0d c0       	rjmp	.+26     	; 0x296c <__udivmodsi4_ep>

00002952 <__udivmodsi4_loop>:
    2952:	aa 1f       	adc	r26, r26
    2954:	bb 1f       	adc	r27, r27
    2956:	ee 1f       	adc	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	a2 17       	cp	r26, r18
    295c:	b3 07       	cpc	r27, r19
    295e:	e4 07       	cpc	r30, r20
    2960:	f5 07       	cpc	r31, r21
    2962:	20 f0       	brcs	.+8      	; 0x296c <__udivmodsi4_ep>
    2964:	a2 1b       	sub	r26, r18
    2966:	b3 0b       	sbc	r27, r19
    2968:	e4 0b       	sbc	r30, r20
    296a:	f5 0b       	sbc	r31, r21

0000296c <__udivmodsi4_ep>:
    296c:	66 1f       	adc	r22, r22
    296e:	77 1f       	adc	r23, r23
    2970:	88 1f       	adc	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	1a 94       	dec	r1
    2976:	69 f7       	brne	.-38     	; 0x2952 <__udivmodsi4_loop>
    2978:	60 95       	com	r22
    297a:	70 95       	com	r23
    297c:	80 95       	com	r24
    297e:	90 95       	com	r25
    2980:	9b 01       	movw	r18, r22
    2982:	ac 01       	movw	r20, r24
    2984:	bd 01       	movw	r22, r26
    2986:	cf 01       	movw	r24, r30
    2988:	08 95       	ret

0000298a <__prologue_saves__>:
    298a:	2f 92       	push	r2
    298c:	3f 92       	push	r3
    298e:	4f 92       	push	r4
    2990:	5f 92       	push	r5
    2992:	6f 92       	push	r6
    2994:	7f 92       	push	r7
    2996:	8f 92       	push	r8
    2998:	9f 92       	push	r9
    299a:	af 92       	push	r10
    299c:	bf 92       	push	r11
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	ca 1b       	sub	r28, r26
    29b4:	db 0b       	sbc	r29, r27
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	09 94       	ijmp

000029c2 <__epilogue_restores__>:
    29c2:	2a 88       	ldd	r2, Y+18	; 0x12
    29c4:	39 88       	ldd	r3, Y+17	; 0x11
    29c6:	48 88       	ldd	r4, Y+16	; 0x10
    29c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    29cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d4:	b9 84       	ldd	r11, Y+9	; 0x09
    29d6:	c8 84       	ldd	r12, Y+8	; 0x08
    29d8:	df 80       	ldd	r13, Y+7	; 0x07
    29da:	ee 80       	ldd	r14, Y+6	; 0x06
    29dc:	fd 80       	ldd	r15, Y+5	; 0x05
    29de:	0c 81       	ldd	r16, Y+4	; 0x04
    29e0:	1b 81       	ldd	r17, Y+3	; 0x03
    29e2:	aa 81       	ldd	r26, Y+2	; 0x02
    29e4:	b9 81       	ldd	r27, Y+1	; 0x01
    29e6:	ce 0f       	add	r28, r30
    29e8:	d1 1d       	adc	r29, r1
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	ed 01       	movw	r28, r26
    29f6:	08 95       	ret

000029f8 <_exit>:
    29f8:	f8 94       	cli

000029fa <__stop_program>:
    29fa:	ff cf       	rjmp	.-2      	; 0x29fa <__stop_program>
